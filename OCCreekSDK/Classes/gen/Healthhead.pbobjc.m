// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: healthhead.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Healthhead.pbobjc.h"
#import "Enums.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - HealthheadRoot

@implementation HealthheadRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - HealthheadRoot_FileDescriptor

static GPBFileDescriptor *HealthheadRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - protocol_health_sync_head

@implementation protocol_health_sync_head

@dynamic syncOperate;
@dynamic syncType;
@dynamic dataOffset;

typedef struct protocol_health_sync_head__storage_ {
  uint32_t _has_storage_[1];
  sync_operate syncOperate;
  sync_type syncType;
  uint32_t dataOffset;
} protocol_health_sync_head__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "syncOperate",
        .dataTypeSpecific.enumDescFunc = sync_operate_EnumDescriptor,
        .number = protocol_health_sync_head_FieldNumber_SyncOperate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(protocol_health_sync_head__storage_, syncOperate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "syncType",
        .dataTypeSpecific.enumDescFunc = sync_type_EnumDescriptor,
        .number = protocol_health_sync_head_FieldNumber_SyncType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(protocol_health_sync_head__storage_, syncType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "dataOffset",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_health_sync_head_FieldNumber_DataOffset,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(protocol_health_sync_head__storage_, dataOffset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[protocol_health_sync_head class]
                                     rootClass:[HealthheadRoot class]
                                          file:HealthheadRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(protocol_health_sync_head__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t protocol_health_sync_head_SyncOperate_RawValue(protocol_health_sync_head *message) {
  GPBDescriptor *descriptor = [protocol_health_sync_head descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_health_sync_head_FieldNumber_SyncOperate];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_health_sync_head_SyncOperate_RawValue(protocol_health_sync_head *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_health_sync_head descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_health_sync_head_FieldNumber_SyncOperate];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t protocol_health_sync_head_SyncType_RawValue(protocol_health_sync_head *message) {
  GPBDescriptor *descriptor = [protocol_health_sync_head descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_health_sync_head_FieldNumber_SyncType];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_health_sync_head_SyncType_RawValue(protocol_health_sync_head *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_health_sync_head descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_health_sync_head_FieldNumber_SyncType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - protocol_health_sync_head_reply

@implementation protocol_health_sync_head_reply

@dynamic syncOperate;
@dynamic syncType;
@dynamic dataOffsetr;
@dynamic dataSize;
@dynamic haveNextData;

typedef struct protocol_health_sync_head_reply__storage_ {
  uint32_t _has_storage_[1];
  sync_operate syncOperate;
  sync_type syncType;
  uint32_t dataOffsetr;
  uint32_t dataSize;
} protocol_health_sync_head_reply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "syncOperate",
        .dataTypeSpecific.enumDescFunc = sync_operate_EnumDescriptor,
        .number = protocol_health_sync_head_reply_FieldNumber_SyncOperate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(protocol_health_sync_head_reply__storage_, syncOperate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "syncType",
        .dataTypeSpecific.enumDescFunc = sync_type_EnumDescriptor,
        .number = protocol_health_sync_head_reply_FieldNumber_SyncType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(protocol_health_sync_head_reply__storage_, syncType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "dataOffsetr",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_health_sync_head_reply_FieldNumber_DataOffsetr,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(protocol_health_sync_head_reply__storage_, dataOffsetr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dataSize",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_health_sync_head_reply_FieldNumber_DataSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(protocol_health_sync_head_reply__storage_, dataSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "haveNextData",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_health_sync_head_reply_FieldNumber_HaveNextData,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[protocol_health_sync_head_reply class]
                                     rootClass:[HealthheadRoot class]
                                          file:HealthheadRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(protocol_health_sync_head_reply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t protocol_health_sync_head_reply_SyncOperate_RawValue(protocol_health_sync_head_reply *message) {
  GPBDescriptor *descriptor = [protocol_health_sync_head_reply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_health_sync_head_reply_FieldNumber_SyncOperate];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_health_sync_head_reply_SyncOperate_RawValue(protocol_health_sync_head_reply *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_health_sync_head_reply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_health_sync_head_reply_FieldNumber_SyncOperate];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t protocol_health_sync_head_reply_SyncType_RawValue(protocol_health_sync_head_reply *message) {
  GPBDescriptor *descriptor = [protocol_health_sync_head_reply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_health_sync_head_reply_FieldNumber_SyncType];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_health_sync_head_reply_SyncType_RawValue(protocol_health_sync_head_reply *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_health_sync_head_reply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_health_sync_head_reply_FieldNumber_SyncType];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
