// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sport.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

GPB_ENUM_FWD_DECLARE(operate_type);
GPB_ENUM_FWD_DECLARE(sport_type);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - SportRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface SportRoot : GPBRootObject
@end

#pragma mark - protocol_exercise_func_support_reply

typedef GPB_ENUM(protocol_exercise_func_support_reply_FieldNumber) {
  protocol_exercise_func_support_reply_FieldNumber_FuncTable = 1,
  protocol_exercise_func_support_reply_FieldNumber_Orun = 2,
  protocol_exercise_func_support_reply_FieldNumber_Irun = 3,
  protocol_exercise_func_support_reply_FieldNumber_Owalk = 4,
  protocol_exercise_func_support_reply_FieldNumber_Iwalk = 5,
  protocol_exercise_func_support_reply_FieldNumber_Hiking = 6,
  protocol_exercise_func_support_reply_FieldNumber_Ocycle = 7,
  protocol_exercise_func_support_reply_FieldNumber_Icycle = 8,
  protocol_exercise_func_support_reply_FieldNumber_Cricket = 9,
  protocol_exercise_func_support_reply_FieldNumber_Football = 10,
  protocol_exercise_func_support_reply_FieldNumber_Pswim = 11,
  protocol_exercise_func_support_reply_FieldNumber_Oswim = 12,
  protocol_exercise_func_support_reply_FieldNumber_Yoga = 13,
  protocol_exercise_func_support_reply_FieldNumber_Pilates = 14,
  protocol_exercise_func_support_reply_FieldNumber_Dance = 15,
  protocol_exercise_func_support_reply_FieldNumber_Zumba = 16,
  protocol_exercise_func_support_reply_FieldNumber_Rower = 17,
  protocol_exercise_func_support_reply_FieldNumber_Elliptical = 18,
  protocol_exercise_func_support_reply_FieldNumber_Ctraining = 19,
  protocol_exercise_func_support_reply_FieldNumber_Tstraining = 20,
  protocol_exercise_func_support_reply_FieldNumber_Fstraining = 21,
  protocol_exercise_func_support_reply_FieldNumber_Hiit = 22,
  protocol_exercise_func_support_reply_FieldNumber_Cooldown = 23,
  protocol_exercise_func_support_reply_FieldNumber_Workout = 24,
  protocol_exercise_func_support_reply_FieldNumber_Fitness = 25,
  protocol_exercise_func_support_reply_FieldNumber_TrailRunning = 26,
  protocol_exercise_func_support_reply_FieldNumber_Treadmill = 27,
  protocol_exercise_func_support_reply_FieldNumber_Aerobics = 28,
  protocol_exercise_func_support_reply_FieldNumber_SitUp = 29,
  protocol_exercise_func_support_reply_FieldNumber_Plank = 30,
  protocol_exercise_func_support_reply_FieldNumber_JumpingJack = 31,
  protocol_exercise_func_support_reply_FieldNumber_ChinUp = 32,
  protocol_exercise_func_support_reply_FieldNumber_PushUp = 33,
  protocol_exercise_func_support_reply_FieldNumber_DeepSquat = 34,
  protocol_exercise_func_support_reply_FieldNumber_HighKneeLift = 35,
  protocol_exercise_func_support_reply_FieldNumber_Dumbbell = 36,
  protocol_exercise_func_support_reply_FieldNumber_Barbell = 37,
  protocol_exercise_func_support_reply_FieldNumber_Boxing = 38,
  protocol_exercise_func_support_reply_FieldNumber_Kickboxing = 39,
  protocol_exercise_func_support_reply_FieldNumber_HorizontalBar = 40,
  protocol_exercise_func_support_reply_FieldNumber_ParallelBars = 41,
  protocol_exercise_func_support_reply_FieldNumber_WalkingMachine = 42,
  protocol_exercise_func_support_reply_FieldNumber_SummitTrainers = 43,
  protocol_exercise_func_support_reply_FieldNumber_Bowling = 44,
  protocol_exercise_func_support_reply_FieldNumber_Tennis = 45,
  protocol_exercise_func_support_reply_FieldNumber_TableTennis = 46,
  protocol_exercise_func_support_reply_FieldNumber_Golf = 47,
  protocol_exercise_func_support_reply_FieldNumber_Basketball = 48,
  protocol_exercise_func_support_reply_FieldNumber_Badminton = 49,
  protocol_exercise_func_support_reply_FieldNumber_Hockey = 50,
  protocol_exercise_func_support_reply_FieldNumber_Rugby = 51,
  protocol_exercise_func_support_reply_FieldNumber_Handball = 52,
  protocol_exercise_func_support_reply_FieldNumber_Squash = 53,
  protocol_exercise_func_support_reply_FieldNumber_Baseball = 54,
  protocol_exercise_func_support_reply_FieldNumber_Softball = 55,
  protocol_exercise_func_support_reply_FieldNumber_Shuttlecock = 56,
  protocol_exercise_func_support_reply_FieldNumber_Sepaktakraw = 57,
  protocol_exercise_func_support_reply_FieldNumber_StreetDance = 58,
  protocol_exercise_func_support_reply_FieldNumber_MountainClinbing = 59,
  protocol_exercise_func_support_reply_FieldNumber_RopeSkipping = 60,
  protocol_exercise_func_support_reply_FieldNumber_ClimbStairs = 61,
  protocol_exercise_func_support_reply_FieldNumber_Ballet = 62,
  protocol_exercise_func_support_reply_FieldNumber_SocialDance = 63,
  protocol_exercise_func_support_reply_FieldNumber_Darts = 64,
  protocol_exercise_func_support_reply_FieldNumber_HorsebackRiding = 65,
  protocol_exercise_func_support_reply_FieldNumber_RollerSkating = 66,
  protocol_exercise_func_support_reply_FieldNumber_TaiChi = 67,
  protocol_exercise_func_support_reply_FieldNumber_Frisbee = 68,
  protocol_exercise_func_support_reply_FieldNumber_HulaHoop = 69,
  protocol_exercise_func_support_reply_FieldNumber_Sleigh = 70,
  protocol_exercise_func_support_reply_FieldNumber_Skating = 71,
  protocol_exercise_func_support_reply_FieldNumber_BobsleighAndTobogganing = 72,
  protocol_exercise_func_support_reply_FieldNumber_Curling = 73,
  protocol_exercise_func_support_reply_FieldNumber_IceHockey = 74,
  protocol_exercise_func_support_reply_FieldNumber_Surfing = 75,
  protocol_exercise_func_support_reply_FieldNumber_Sailboat = 76,
  protocol_exercise_func_support_reply_FieldNumber_Sailboard = 77,
  protocol_exercise_func_support_reply_FieldNumber_Foldboating = 78,
  protocol_exercise_func_support_reply_FieldNumber_Canoeing = 79,
  protocol_exercise_func_support_reply_FieldNumber_BoatRace = 80,
  protocol_exercise_func_support_reply_FieldNumber_Motorboat = 81,
  protocol_exercise_func_support_reply_FieldNumber_WaterPolo = 82,
  protocol_exercise_func_support_reply_FieldNumber_SlidingPlate = 83,
  protocol_exercise_func_support_reply_FieldNumber_RockClimbing = 84,
  protocol_exercise_func_support_reply_FieldNumber_BungeeJumping = 85,
  protocol_exercise_func_support_reply_FieldNumber_Parkour = 86,
  protocol_exercise_func_support_reply_FieldNumber_Other = 87,
  protocol_exercise_func_support_reply_FieldNumber_Spinning = 88,
  protocol_exercise_func_support_reply_FieldNumber_MartialArts = 89,
  protocol_exercise_func_support_reply_FieldNumber_Taekwondo = 90,
  protocol_exercise_func_support_reply_FieldNumber_Karate = 91,
  protocol_exercise_func_support_reply_FieldNumber_Gymnastics = 92,
  protocol_exercise_func_support_reply_FieldNumber_Padel = 93,
  protocol_exercise_func_support_reply_FieldNumber_Pickleball = 94,
  protocol_exercise_func_support_reply_FieldNumber_Snowboarding = 95,
  protocol_exercise_func_support_reply_FieldNumber_Skiing = 96,
  protocol_exercise_func_support_reply_FieldNumber_Paddling = 97,
  protocol_exercise_func_support_reply_FieldNumber_Bmx = 98,
  protocol_exercise_func_support_reply_FieldNumber_Fencing = 99,
  protocol_exercise_func_support_reply_FieldNumber_Billiards = 100,
  protocol_exercise_func_support_reply_FieldNumber_BeachSoccer = 101,
  protocol_exercise_func_support_reply_FieldNumber_BeachVolleyball = 102,
  protocol_exercise_func_support_reply_FieldNumber_Dodgeball = 103,
  protocol_exercise_func_support_reply_FieldNumber_Jazz = 104,
  protocol_exercise_func_support_reply_FieldNumber_Latin = 105,
  protocol_exercise_func_support_reply_FieldNumber_SquareDance = 106,
  protocol_exercise_func_support_reply_FieldNumber_Volleyball = 107,
  protocol_exercise_func_support_reply_FieldNumber_KiteFlying = 108,
  protocol_exercise_func_support_reply_FieldNumber_Fishing = 109,
  protocol_exercise_func_support_reply_FieldNumber_Archery = 110,
  protocol_exercise_func_support_reply_FieldNumber_Shooting = 111,
  protocol_exercise_func_support_reply_FieldNumber_WhiteWaterRafting = 112,
  protocol_exercise_func_support_reply_FieldNumber_AlpineSkiing = 113,
  protocol_exercise_func_support_reply_FieldNumber_CrossCountrySkiing = 114,
  protocol_exercise_func_support_reply_FieldNumber_Biathon = 115,
  protocol_exercise_func_support_reply_FieldNumber_DragonBoatRacing = 116,
  protocol_exercise_func_support_reply_FieldNumber_Racing = 117,
};

/**
 * Get the sports type supported by the device
 **/
GPB_FINAL @interface protocol_exercise_func_support_reply : GPBMessage

/** Function table */
@property(nonatomic, readwrite) uint32_t funcTable;

/** Outdoor running */
@property(nonatomic, readwrite) BOOL orun;

/** Indoor running */
@property(nonatomic, readwrite) BOOL irun;

/** walk outdoors */
@property(nonatomic, readwrite) BOOL owalk;

/** Indoor walking */
@property(nonatomic, readwrite) BOOL iwalk;

/** hiking */
@property(nonatomic, readwrite) BOOL hiking;

/** outdoor cycling */
@property(nonatomic, readwrite) BOOL ocycle;

/** Indoor cycling */
@property(nonatomic, readwrite) BOOL icycle;

/** cricket */
@property(nonatomic, readwrite) BOOL cricket;

/** football */
@property(nonatomic, readwrite) BOOL football;

/** Pool swimming */
@property(nonatomic, readwrite) BOOL pswim;

/** Open area swimming */
@property(nonatomic, readwrite) BOOL oswim;

/** yoga */
@property(nonatomic, readwrite) BOOL yoga;

/** Pilates */
@property(nonatomic, readwrite) BOOL pilates;

/** Dance */
@property(nonatomic, readwrite) BOOL dance;

/** Zumba dance */
@property(nonatomic, readwrite) BOOL zumba;

/** rowing machine */
@property(nonatomic, readwrite) BOOL rower;

/** elliptical machine */
@property(nonatomic, readwrite) BOOL elliptical;

/** Core training */
@property(nonatomic, readwrite) BOOL ctraining;

/** Traditional strength training */
@property(nonatomic, readwrite) BOOL tstraining;

/** Functional strength training */
@property(nonatomic, readwrite) BOOL fstraining;

/** hiit */
@property(nonatomic, readwrite) BOOL hiit;

/** tidy up and relax */
@property(nonatomic, readwrite) BOOL cooldown;

/** free training */
@property(nonatomic, readwrite) BOOL workout;

/** Fitness */
@property(nonatomic, readwrite) BOOL fitness;

/** Trail running */
@property(nonatomic, readwrite) BOOL trailRunning;

/** fitness */
@property(nonatomic, readwrite) BOOL treadmill;

/** aerobics */
@property(nonatomic, readwrite) BOOL aerobics;

/** sit ups */
@property(nonatomic, readwrite) BOOL sitUp;

/** Plank support */
@property(nonatomic, readwrite) BOOL plank;

/** jumping jacks */
@property(nonatomic, readwrite) BOOL jumpingJack;

/** pull-ups */
@property(nonatomic, readwrite) BOOL chinUp;

/** Push-ups */
@property(nonatomic, readwrite) BOOL pushUp;

/** Squat */
@property(nonatomic, readwrite) BOOL deepSquat;

/** High leg lift */
@property(nonatomic, readwrite) BOOL highKneeLift;

/** dumbbell */
@property(nonatomic, readwrite) BOOL dumbbell;

/** barbell */
@property(nonatomic, readwrite) BOOL barbell;

/** boxing */
@property(nonatomic, readwrite) BOOL boxing;

/** free fighting */
@property(nonatomic, readwrite) BOOL kickboxing;

/** horizontal bar */
@property(nonatomic, readwrite) BOOL horizontalBar;

/** parallel bars */
@property(nonatomic, readwrite) BOOL parallelBars;

/** Walking machine */
@property(nonatomic, readwrite) BOOL walkingMachine;

/** climbing machine */
@property(nonatomic, readwrite) BOOL summitTrainers;

/** Balls */
@property(nonatomic, readwrite) BOOL bowling;

/** tennis */
@property(nonatomic, readwrite) BOOL tennis;

/** Table tennis */
@property(nonatomic, readwrite) BOOL tableTennis;

/** golf ball */
@property(nonatomic, readwrite) BOOL golf;

/** basketball */
@property(nonatomic, readwrite) BOOL basketball;

/** badminton */
@property(nonatomic, readwrite) BOOL badminton;

/** hockey */
@property(nonatomic, readwrite) BOOL hockey;

/** rugby */
@property(nonatomic, readwrite) BOOL rugby;

/** Handball */
@property(nonatomic, readwrite) BOOL handball;

/** squash */
@property(nonatomic, readwrite) BOOL squash;

/** baseball */
@property(nonatomic, readwrite) BOOL baseball;

/** softball */
@property(nonatomic, readwrite) BOOL softball;

/** Shuttlecock */
@property(nonatomic, readwrite) BOOL shuttlecock;

/** Takraw ball */
@property(nonatomic, readwrite) BOOL sepaktakraw;

/** Leisure sport */
@property(nonatomic, readwrite) BOOL streetDance;

/** Mountain climbing */
@property(nonatomic, readwrite) BOOL mountainClinbing;

/** skipping rope */
@property(nonatomic, readwrite) BOOL ropeSkipping;

/** Climb stairs */
@property(nonatomic, readwrite) BOOL climbStairs;

/** ballet */
@property(nonatomic, readwrite) BOOL ballet;

/** Social dance */
@property(nonatomic, readwrite) BOOL socialDance;

/** darts */
@property(nonatomic, readwrite) BOOL darts;

/** horseback riding */
@property(nonatomic, readwrite) BOOL horsebackRiding;

/** Roller skating */
@property(nonatomic, readwrite) BOOL rollerSkating;

/** Tai Chi */
@property(nonatomic, readwrite) BOOL taiChi;

/** frisbee */
@property(nonatomic, readwrite) BOOL frisbee;

/** hula hoop */
@property(nonatomic, readwrite) BOOL hulaHoop;

/** ice and snow sports */
@property(nonatomic, readwrite) BOOL sleigh;

/** skating */
@property(nonatomic, readwrite) BOOL skating;

/** Snowmobile */
@property(nonatomic, readwrite) BOOL bobsleighAndTobogganing;

/** curling */
@property(nonatomic, readwrite) BOOL curling;

/** ice hockey */
@property(nonatomic, readwrite) BOOL iceHockey;

/** water sports */
@property(nonatomic, readwrite) BOOL surfing;

/** Sailboat */
@property(nonatomic, readwrite) BOOL sailboat;

/** Sailboard */
@property(nonatomic, readwrite) BOOL sailboard;

/** kayak */
@property(nonatomic, readwrite) BOOL foldboating;

/** rowing boat */
@property(nonatomic, readwrite) BOOL canoeing;

/** boat racing */
@property(nonatomic, readwrite) BOOL boatRace;

/** motorboat */
@property(nonatomic, readwrite) BOOL motorboat;

/** water polo */
@property(nonatomic, readwrite) BOOL waterPolo;

/** Extreme sport */
@property(nonatomic, readwrite) BOOL slidingPlate;

/** rock climbing */
@property(nonatomic, readwrite) BOOL rockClimbing;

/** bungee jumping */
@property(nonatomic, readwrite) BOOL bungeeJumping;

/** parkour */
@property(nonatomic, readwrite) BOOL parkour;

/** other */
@property(nonatomic, readwrite) BOOL other;

/** Add new sports */
@property(nonatomic, readwrite) BOOL spinning;

/** martial arts */
@property(nonatomic, readwrite) BOOL martialArts;

/** Taekwondo */
@property(nonatomic, readwrite) BOOL taekwondo;

/** karate */
@property(nonatomic, readwrite) BOOL karate;

/** Gymnastics */
@property(nonatomic, readwrite) BOOL gymnastics;

/** cage tennis */
@property(nonatomic, readwrite) BOOL padel;

/** pickleball */
@property(nonatomic, readwrite) BOOL pickleball;

/** Snowboarding */
@property(nonatomic, readwrite) BOOL snowboarding;

/** skiing */
@property(nonatomic, readwrite) BOOL skiing;

/** paddling */
@property(nonatomic, readwrite) BOOL paddling;

/** BMX */
@property(nonatomic, readwrite) BOOL bmx;

/** fencing */
@property(nonatomic, readwrite) BOOL fencing;

/** Billiards */
@property(nonatomic, readwrite) BOOL billiards;

/** beach soccer */
@property(nonatomic, readwrite) BOOL beachSoccer;

/** Beach volleyball */
@property(nonatomic, readwrite) BOOL beachVolleyball;

/** dodgeball */
@property(nonatomic, readwrite) BOOL dodgeball;

/** jazz dance */
@property(nonatomic, readwrite) BOOL jazz;

/** Latin dance */
@property(nonatomic, readwrite) BOOL latin;

/** square dance */
@property(nonatomic, readwrite) BOOL squareDance;

/** volleyball */
@property(nonatomic, readwrite) BOOL volleyball;

/** fly a kite */
@property(nonatomic, readwrite) BOOL kiteFlying;

/** Fishing */
@property(nonatomic, readwrite) BOOL fishing;

/** Archery */
@property(nonatomic, readwrite) BOOL archery;

/** shooting */
@property(nonatomic, readwrite) BOOL shooting;

/** Rafting */
@property(nonatomic, readwrite) BOOL whiteWaterRafting;

/** alpine skiing */
@property(nonatomic, readwrite) BOOL alpineSkiing;

/** cross-country skiing */
@property(nonatomic, readwrite) BOOL crossCountrySkiing;

/** biathon */
@property(nonatomic, readwrite) BOOL biathon;

/** Dragon boat */
@property(nonatomic, readwrite) BOOL dragonBoatRacing;

/** racing */
@property(nonatomic, readwrite) BOOL racing;

@end

#pragma mark - protocol_exercise_sport_mode_sort

typedef GPB_ENUM(protocol_exercise_sport_mode_sort_FieldNumber) {
  protocol_exercise_sport_mode_sort_FieldNumber_Operate = 1,
  protocol_exercise_sport_mode_sort_FieldNumber_ItemsLen = 2,
  protocol_exercise_sport_mode_sort_FieldNumber_SportItemsArray = 3,
};

/**
 * Equipment movement order
 **/
GPB_FINAL @interface protocol_exercise_sport_mode_sort : GPBMessage

/** 1bytes operation type 0: invalid operation 1: query 2: set */
@property(nonatomic, readwrite) enum operate_type operate;

/** 1bytes number of motion sorting */
@property(nonatomic, readwrite) uint32_t itemsLen;

/** sport list sorting */
// |sportItemsArray| contains |sport_type|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *sportItemsArray;
/** The number of items in @c sportItemsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger sportItemsArray_Count;

@end

/**
 * Fetches the raw value of a @c protocol_exercise_sport_mode_sort's @c operate property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t protocol_exercise_sport_mode_sort_Operate_RawValue(protocol_exercise_sport_mode_sort *message);
/**
 * Sets the raw value of an @c protocol_exercise_sport_mode_sort's @c operate property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void Setprotocol_exercise_sport_mode_sort_Operate_RawValue(protocol_exercise_sport_mode_sort *message, int32_t value);

#pragma mark - protocol_exercise_sport_mode_sort_inquire_reply

typedef GPB_ENUM(protocol_exercise_sport_mode_sort_inquire_reply_FieldNumber) {
  protocol_exercise_sport_mode_sort_inquire_reply_FieldNumber_Operate = 1,
  protocol_exercise_sport_mode_sort_inquire_reply_FieldNumber_MinShowNum = 2,
  protocol_exercise_sport_mode_sort_inquire_reply_FieldNumber_MaxShowNum = 3,
  protocol_exercise_sport_mode_sort_inquire_reply_FieldNumber_AllNum = 4,
  protocol_exercise_sport_mode_sort_inquire_reply_FieldNumber_ItemsLen = 5,
  protocol_exercise_sport_mode_sort_inquire_reply_FieldNumber_SportItemsArray = 6,
};

GPB_FINAL @interface protocol_exercise_sport_mode_sort_inquire_reply : GPBMessage

/** 1bytes operation type 0: invalid operation 1: query 2: set */
@property(nonatomic, readwrite) enum operate_type operate;

/** 1bytes minimum display number of firmware motion list */
@property(nonatomic, readwrite) uint32_t minShowNum;

/** 1bytes maximum display number of firmware motion list */
@property(nonatomic, readwrite) uint32_t maxShowNum;

/** 1bytes total number of movements supported by the firmware */
@property(nonatomic, readwrite) uint32_t allNum;

/** 1bytes number of motion sorting */
@property(nonatomic, readwrite) uint32_t itemsLen;

/** sport list sorting */
// |sportItemsArray| contains |sport_type|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *sportItemsArray;
/** The number of items in @c sportItemsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger sportItemsArray_Count;

@end

/**
 * Fetches the raw value of a @c protocol_exercise_sport_mode_sort_inquire_reply's @c operate property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t protocol_exercise_sport_mode_sort_inquire_reply_Operate_RawValue(protocol_exercise_sport_mode_sort_inquire_reply *message);
/**
 * Sets the raw value of an @c protocol_exercise_sport_mode_sort_inquire_reply's @c operate property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void Setprotocol_exercise_sport_mode_sort_inquire_reply_Operate_RawValue(protocol_exercise_sport_mode_sort_inquire_reply *message, int32_t value);

#pragma mark - protocol_exercise_sporting_param_sort

typedef GPB_ENUM(protocol_exercise_sporting_param_sort_FieldNumber) {
  protocol_exercise_sporting_param_sort_FieldNumber_Operate = 1,
  protocol_exercise_sporting_param_sort_FieldNumber_SportType = 2,
  protocol_exercise_sporting_param_sort_FieldNumber_ItemsLen = 3,
  protocol_exercise_sporting_param_sort_FieldNumber_Items = 4,
};

/**
 * Child item data in motion
 **/
GPB_FINAL @interface protocol_exercise_sporting_param_sort : GPBMessage

/** 1bytes operation type 0: invalid operation 1: query 2: set */
@property(nonatomic, readwrite) enum operate_type operate;

/** 1bytes sport type */
@property(nonatomic, readwrite) uint32_t sportType;

/** 1bytes the number of sub-item data sorting lists in the movement */
@property(nonatomic, readwrite) uint32_t itemsLen;

/** Sorted list of sub-items data in sports */
@property(nonatomic, readwrite, copy, null_resettable) NSData *items;

@end

/**
 * Fetches the raw value of a @c protocol_exercise_sporting_param_sort's @c operate property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t protocol_exercise_sporting_param_sort_Operate_RawValue(protocol_exercise_sporting_param_sort *message);
/**
 * Sets the raw value of an @c protocol_exercise_sporting_param_sort's @c operate property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void Setprotocol_exercise_sporting_param_sort_Operate_RawValue(protocol_exercise_sporting_param_sort *message, int32_t value);

#pragma mark - protocol_exercise_sporting_param_sort_inquire_reply

typedef GPB_ENUM(protocol_exercise_sporting_param_sort_inquire_reply_FieldNumber) {
  protocol_exercise_sporting_param_sort_inquire_reply_FieldNumber_Operate = 1,
  protocol_exercise_sporting_param_sort_inquire_reply_FieldNumber_SportType = 2,
  protocol_exercise_sporting_param_sort_inquire_reply_FieldNumber_ItemsLen = 3,
  protocol_exercise_sporting_param_sort_inquire_reply_FieldNumber_Items = 4,
};

GPB_FINAL @interface protocol_exercise_sporting_param_sort_inquire_reply : GPBMessage

/** 1bytes operation type 0: invalid operation 1: query 2: set */
@property(nonatomic, readwrite) enum operate_type operate;

/** 1bytes sport type */
@property(nonatomic, readwrite) enum sport_type sportType;

/** 1bytes the number of sub-item data sorting lists in the movement */
@property(nonatomic, readwrite) uint32_t itemsLen;

/** Sorted list of sub-items data in sports */
@property(nonatomic, readwrite, copy, null_resettable) NSData *items;

@end

/**
 * Fetches the raw value of a @c protocol_exercise_sporting_param_sort_inquire_reply's @c operate property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t protocol_exercise_sporting_param_sort_inquire_reply_Operate_RawValue(protocol_exercise_sporting_param_sort_inquire_reply *message);
/**
 * Sets the raw value of an @c protocol_exercise_sporting_param_sort_inquire_reply's @c operate property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void Setprotocol_exercise_sporting_param_sort_inquire_reply_Operate_RawValue(protocol_exercise_sporting_param_sort_inquire_reply *message, int32_t value);

/**
 * Fetches the raw value of a @c protocol_exercise_sporting_param_sort_inquire_reply's @c sportType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t protocol_exercise_sporting_param_sort_inquire_reply_SportType_RawValue(protocol_exercise_sporting_param_sort_inquire_reply *message);
/**
 * Sets the raw value of an @c protocol_exercise_sporting_param_sort_inquire_reply's @c sportType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void Setprotocol_exercise_sporting_param_sort_inquire_reply_SportType_RawValue(protocol_exercise_sporting_param_sort_inquire_reply *message, int32_t value);

#pragma mark - protocol_exercise_intelligent_recognition

typedef GPB_ENUM(protocol_exercise_intelligent_recognition_FieldNumber) {
  protocol_exercise_intelligent_recognition_FieldNumber_Operate = 1,
  protocol_exercise_intelligent_recognition_FieldNumber_WalkTypeSwitch = 2,
  protocol_exercise_intelligent_recognition_FieldNumber_RunTypeSwitch = 3,
  protocol_exercise_intelligent_recognition_FieldNumber_BicycleTypeSwitch = 4,
  protocol_exercise_intelligent_recognition_FieldNumber_RowingTypeSwitch = 5,
  protocol_exercise_intelligent_recognition_FieldNumber_SwimTypeSwitch = 6,
  protocol_exercise_intelligent_recognition_FieldNumber_SportAutoPauseSwitch = 7,
  protocol_exercise_intelligent_recognition_FieldNumber_SportAutoEndSwitch = 8,
};

/**
 * Movement self-identification
 **/
GPB_FINAL @interface protocol_exercise_intelligent_recognition : GPBMessage

/** 1bytes operation type 0: invalid operation 1: query 2: set */
@property(nonatomic, readwrite) enum operate_type operate;

/** 1bytes automatic walking recognition switch true on = 1; false off */
@property(nonatomic, readwrite) BOOL walkTypeSwitch;

/** 1bytes running automatic recognition switch true on = 1; false off */
@property(nonatomic, readwrite) BOOL runTypeSwitch;

/** 1byte bicycle automatic identification switch true on = 1; false off */
@property(nonatomic, readwrite) BOOL bicycleTypeSwitch;

/** 1byte rowing machine automatic recognition switch true on = 1; false off */
@property(nonatomic, readwrite) BOOL rowingTypeSwitch;

/** 1byte swimming automatic recognition switch true on = 1; false off */
@property(nonatomic, readwrite) BOOL swimTypeSwitch;

/** 1byte sports auto pause switch true on = 1; false off */
@property(nonatomic, readwrite) BOOL sportAutoPauseSwitch;

/** 1byte sports automatic end switch true on = 1; false off */
@property(nonatomic, readwrite) BOOL sportAutoEndSwitch;

@end

/**
 * Fetches the raw value of a @c protocol_exercise_intelligent_recognition's @c operate property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t protocol_exercise_intelligent_recognition_Operate_RawValue(protocol_exercise_intelligent_recognition *message);
/**
 * Sets the raw value of an @c protocol_exercise_intelligent_recognition's @c operate property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void Setprotocol_exercise_intelligent_recognition_Operate_RawValue(protocol_exercise_intelligent_recognition *message, int32_t value);

#pragma mark - protocol_exercise_intelligent_recognition_inquire_reply

typedef GPB_ENUM(protocol_exercise_intelligent_recognition_inquire_reply_FieldNumber) {
  protocol_exercise_intelligent_recognition_inquire_reply_FieldNumber_Operate = 1,
  protocol_exercise_intelligent_recognition_inquire_reply_FieldNumber_WalkTypeSwitch = 2,
  protocol_exercise_intelligent_recognition_inquire_reply_FieldNumber_RunTypeSwitch = 3,
  protocol_exercise_intelligent_recognition_inquire_reply_FieldNumber_BicycleTypeSwitch = 4,
  protocol_exercise_intelligent_recognition_inquire_reply_FieldNumber_RowingTypeSwitch = 5,
  protocol_exercise_intelligent_recognition_inquire_reply_FieldNumber_SwimTypeSwitch = 6,
  protocol_exercise_intelligent_recognition_inquire_reply_FieldNumber_SportAutoPauseSwitch = 7,
  protocol_exercise_intelligent_recognition_inquire_reply_FieldNumber_SportAutoEndSwitch = 8,
};

GPB_FINAL @interface protocol_exercise_intelligent_recognition_inquire_reply : GPBMessage

/** 1bytes operation type 0: invalid operation 1: query 2: set */
@property(nonatomic, readwrite) enum operate_type operate;

/** 1bytes automatic walking recognition switch true on = 1; false off */
@property(nonatomic, readwrite) BOOL walkTypeSwitch;

/** 1bytes running automatic recognition switch true on = 1; false off */
@property(nonatomic, readwrite) BOOL runTypeSwitch;

/** 1byte bicycle automatic identification switch true on = 1; false off */
@property(nonatomic, readwrite) BOOL bicycleTypeSwitch;

/** 1byte rowing machine automatic recognition switch true on = 1; false off */
@property(nonatomic, readwrite) BOOL rowingTypeSwitch;

/** 1byte swimming automatic recognition switch true on = 1; false off */
@property(nonatomic, readwrite) BOOL swimTypeSwitch;

/** 1byte sports auto pause switch true on = 1; false off */
@property(nonatomic, readwrite) BOOL sportAutoPauseSwitch;

/** 1byte sports automatic end switch true on = 1; false off */
@property(nonatomic, readwrite) BOOL sportAutoEndSwitch;

@end

/**
 * Fetches the raw value of a @c protocol_exercise_intelligent_recognition_inquire_reply's @c operate property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t protocol_exercise_intelligent_recognition_inquire_reply_Operate_RawValue(protocol_exercise_intelligent_recognition_inquire_reply *message);
/**
 * Sets the raw value of an @c protocol_exercise_intelligent_recognition_inquire_reply's @c operate property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void Setprotocol_exercise_intelligent_recognition_inquire_reply_Operate_RawValue(protocol_exercise_intelligent_recognition_inquire_reply *message, int32_t value);

#pragma mark - protocol_exercise_heart_rate_zone

typedef GPB_ENUM(protocol_exercise_heart_rate_zone_FieldNumber) {
  protocol_exercise_heart_rate_zone_FieldNumber_Operate = 1,
  protocol_exercise_heart_rate_zone_FieldNumber_Zone1 = 2,
  protocol_exercise_heart_rate_zone_FieldNumber_Zone2 = 3,
  protocol_exercise_heart_rate_zone_FieldNumber_Zone3 = 4,
  protocol_exercise_heart_rate_zone_FieldNumber_Zone4 = 5,
  protocol_exercise_heart_rate_zone_FieldNumber_Zone5 = 6,
  protocol_exercise_heart_rate_zone_FieldNumber_Zone6 = 7,
};

/**
 * heart rate interval
 **/
GPB_FINAL @interface protocol_exercise_heart_rate_zone : GPBMessage

/** 1bytes operation type 0: invalid operation 1: query 2: set */
@property(nonatomic, readwrite) enum operate_type operate;

/** 1bytes heart rate zone 1 */
@property(nonatomic, readwrite) uint32_t zone1;

/** 1bytes heart rate zone 2 */
@property(nonatomic, readwrite) uint32_t zone2;

/** 1bytes heart rate zone 3 */
@property(nonatomic, readwrite) uint32_t zone3;

/** 1bytes heart rate zone 4 */
@property(nonatomic, readwrite) uint32_t zone4;

/** 1bytes heart rate zone 5 */
@property(nonatomic, readwrite) uint32_t zone5;

/** 1bytes heart rate zone 6 */
@property(nonatomic, readwrite) uint32_t zone6;

@end

/**
 * Fetches the raw value of a @c protocol_exercise_heart_rate_zone's @c operate property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t protocol_exercise_heart_rate_zone_Operate_RawValue(protocol_exercise_heart_rate_zone *message);
/**
 * Sets the raw value of an @c protocol_exercise_heart_rate_zone's @c operate property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void Setprotocol_exercise_heart_rate_zone_Operate_RawValue(protocol_exercise_heart_rate_zone *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
