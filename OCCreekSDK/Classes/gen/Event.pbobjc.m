// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Event.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - EventRoot

@implementation EventRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - EventRoot_FileDescriptor

static GPBFileDescriptor *EventRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - protocol_event_report

@implementation protocol_event_report

@dynamic eventId;
@dynamic eventSubId;
@dynamic eventTime;
@dynamic eventMessage;

typedef struct protocol_event_report__storage_ {
  uint32_t _has_storage_[1];
  NSString *eventId;
  NSString *eventSubId;
  NSString *eventTime;
  NSString *eventMessage;
} protocol_event_report__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "eventId",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_event_report_FieldNumber_EventId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(protocol_event_report__storage_, eventId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "eventSubId",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_event_report_FieldNumber_EventSubId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(protocol_event_report__storage_, eventSubId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "eventTime",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_event_report_FieldNumber_EventTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(protocol_event_report__storage_, eventTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "eventMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_event_report_FieldNumber_EventMessage,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(protocol_event_report__storage_, eventMessage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[protocol_event_report class]
                                     rootClass:[EventRoot class]
                                          file:EventRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(protocol_event_report__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
