// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deviceinfo.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Deviceinfo.pbobjc.h"
#import "Enums.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(device_size_info);
GPBObjCClassDeclaration(device_sn_info);
GPBObjCClassDeclaration(device_voice_assistant);
GPBObjCClassDeclaration(hardware_support);
GPBObjCClassDeclaration(protocol_bt_name);
GPBObjCClassDeclaration(protocol_device_batt_info);

#pragma mark - DeviceinfoRoot

@implementation DeviceinfoRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - DeviceinfoRoot_FileDescriptor

static GPBFileDescriptor *DeviceinfoRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - protocol_device_batt_info

@implementation protocol_device_batt_info

@dynamic voltage;
@dynamic status;
@dynamic battLevel;
@dynamic lastChargingYear;
@dynamic lastChargingMonth;
@dynamic lastChargingDay;
@dynamic lastChargingHour;
@dynamic lastChargingMinute;
@dynamic lastChargingSecond;
@dynamic mode;

typedef struct protocol_device_batt_info__storage_ {
  uint32_t _has_storage_[1];
  uint32_t voltage;
  Batt_status status;
  uint32_t battLevel;
  uint32_t lastChargingYear;
  uint32_t lastChargingMonth;
  uint32_t lastChargingDay;
  uint32_t lastChargingHour;
  uint32_t lastChargingMinute;
  uint32_t lastChargingSecond;
  Batt_mode mode;
} protocol_device_batt_info__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voltage",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_batt_info_FieldNumber_Voltage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(protocol_device_batt_info__storage_, voltage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = Batt_status_EnumDescriptor,
        .number = protocol_device_batt_info_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(protocol_device_batt_info__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "battLevel",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_batt_info_FieldNumber_BattLevel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(protocol_device_batt_info__storage_, battLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lastChargingYear",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_batt_info_FieldNumber_LastChargingYear,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(protocol_device_batt_info__storage_, lastChargingYear),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lastChargingMonth",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_batt_info_FieldNumber_LastChargingMonth,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(protocol_device_batt_info__storage_, lastChargingMonth),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lastChargingDay",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_batt_info_FieldNumber_LastChargingDay,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(protocol_device_batt_info__storage_, lastChargingDay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lastChargingHour",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_batt_info_FieldNumber_LastChargingHour,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(protocol_device_batt_info__storage_, lastChargingHour),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lastChargingMinute",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_batt_info_FieldNumber_LastChargingMinute,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(protocol_device_batt_info__storage_, lastChargingMinute),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "lastChargingSecond",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_batt_info_FieldNumber_LastChargingSecond,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(protocol_device_batt_info__storage_, lastChargingSecond),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "mode",
        .dataTypeSpecific.enumDescFunc = Batt_mode_EnumDescriptor,
        .number = protocol_device_batt_info_FieldNumber_Mode,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(protocol_device_batt_info__storage_, mode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[protocol_device_batt_info class]
                                     rootClass:[DeviceinfoRoot class]
                                          file:DeviceinfoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(protocol_device_batt_info__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t protocol_device_batt_info_Status_RawValue(protocol_device_batt_info *message) {
  GPBDescriptor *descriptor = [protocol_device_batt_info descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_device_batt_info_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_device_batt_info_Status_RawValue(protocol_device_batt_info *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_device_batt_info descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_device_batt_info_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t protocol_device_batt_info_Mode_RawValue(protocol_device_batt_info *message) {
  GPBDescriptor *descriptor = [protocol_device_batt_info descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_device_batt_info_FieldNumber_Mode];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_device_batt_info_Mode_RawValue(protocol_device_batt_info *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_device_batt_info descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_device_batt_info_FieldNumber_Mode];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - protocol_bt_name

@implementation protocol_bt_name

@dynamic isSupport;
@dynamic btName;

typedef struct protocol_bt_name__storage_ {
  uint32_t _has_storage_[1];
  NSData *btName;
} protocol_bt_name__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isSupport",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_bt_name_FieldNumber_IsSupport,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "btName",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_bt_name_FieldNumber_BtName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(protocol_bt_name__storage_, btName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[protocol_bt_name class]
                                     rootClass:[DeviceinfoRoot class]
                                          file:DeviceinfoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(protocol_bt_name__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - device_size_info

@implementation device_size_info

@dynamic width;
@dynamic height;
@dynamic angle;

typedef struct device_size_info__storage_ {
  uint32_t _has_storage_[1];
  uint32_t width;
  uint32_t height;
  uint32_t angle;
} device_size_info__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "width",
        .dataTypeSpecific.clazz = Nil,
        .number = device_size_info_FieldNumber_Width,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(device_size_info__storage_, width),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = device_size_info_FieldNumber_Height,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(device_size_info__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "angle",
        .dataTypeSpecific.clazz = Nil,
        .number = device_size_info_FieldNumber_Angle,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(device_size_info__storage_, angle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[device_size_info class]
                                     rootClass:[DeviceinfoRoot class]
                                          file:DeviceinfoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(device_size_info__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - hardware_support

@implementation hardware_support

@dynamic heartrateHardware;
@dynamic accHardware;
@dynamic gyroHardware;
@dynamic buttonHardware;
@dynamic lcdHardware;
@dynamic tpHardware;
@dynamic motorHardware;
@dynamic micHardware;
@dynamic speakHardware;
@dynamic gpsHardware;
@dynamic norflashHardware;
@dynamic nandflashHardware;

typedef struct hardware_support__storage_ {
  uint32_t _has_storage_[1];
} hardware_support__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "heartrateHardware",
        .dataTypeSpecific.clazz = Nil,
        .number = hardware_support_FieldNumber_HeartrateHardware,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "accHardware",
        .dataTypeSpecific.clazz = Nil,
        .number = hardware_support_FieldNumber_AccHardware,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "gyroHardware",
        .dataTypeSpecific.clazz = Nil,
        .number = hardware_support_FieldNumber_GyroHardware,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "buttonHardware",
        .dataTypeSpecific.clazz = Nil,
        .number = hardware_support_FieldNumber_ButtonHardware,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "lcdHardware",
        .dataTypeSpecific.clazz = Nil,
        .number = hardware_support_FieldNumber_LcdHardware,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "tpHardware",
        .dataTypeSpecific.clazz = Nil,
        .number = hardware_support_FieldNumber_TpHardware,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "motorHardware",
        .dataTypeSpecific.clazz = Nil,
        .number = hardware_support_FieldNumber_MotorHardware,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "micHardware",
        .dataTypeSpecific.clazz = Nil,
        .number = hardware_support_FieldNumber_MicHardware,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "speakHardware",
        .dataTypeSpecific.clazz = Nil,
        .number = hardware_support_FieldNumber_SpeakHardware,
        .hasIndex = 16,
        .offset = 17,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "gpsHardware",
        .dataTypeSpecific.clazz = Nil,
        .number = hardware_support_FieldNumber_GpsHardware,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "norflashHardware",
        .dataTypeSpecific.clazz = Nil,
        .number = hardware_support_FieldNumber_NorflashHardware,
        .hasIndex = 20,
        .offset = 21,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "nandflashHardware",
        .dataTypeSpecific.clazz = Nil,
        .number = hardware_support_FieldNumber_NandflashHardware,
        .hasIndex = 22,
        .offset = 23,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[hardware_support class]
                                     rootClass:[DeviceinfoRoot class]
                                          file:DeviceinfoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(hardware_support__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - device_sn_info

@implementation device_sn_info

@dynamic productId;
@dynamic factoryId;
@dynamic customerId;
@dynamic productionDate;
@dynamic batchNum;
@dynamic serialNum;
@dynamic colorCode;

typedef struct device_sn_info__storage_ {
  uint32_t _has_storage_[1];
  uint32_t productId;
  uint32_t factoryId;
  uint32_t customerId;
  uint32_t productionDate;
  uint32_t batchNum;
  uint32_t serialNum;
  uint32_t colorCode;
} device_sn_info__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "productId",
        .dataTypeSpecific.clazz = Nil,
        .number = device_sn_info_FieldNumber_ProductId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(device_sn_info__storage_, productId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "factoryId",
        .dataTypeSpecific.clazz = Nil,
        .number = device_sn_info_FieldNumber_FactoryId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(device_sn_info__storage_, factoryId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = device_sn_info_FieldNumber_CustomerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(device_sn_info__storage_, customerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "productionDate",
        .dataTypeSpecific.clazz = Nil,
        .number = device_sn_info_FieldNumber_ProductionDate,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(device_sn_info__storage_, productionDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "batchNum",
        .dataTypeSpecific.clazz = Nil,
        .number = device_sn_info_FieldNumber_BatchNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(device_sn_info__storage_, batchNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "serialNum",
        .dataTypeSpecific.clazz = Nil,
        .number = device_sn_info_FieldNumber_SerialNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(device_sn_info__storage_, serialNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "colorCode",
        .dataTypeSpecific.clazz = Nil,
        .number = device_sn_info_FieldNumber_ColorCode,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(device_sn_info__storage_, colorCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[device_sn_info class]
                                     rootClass:[DeviceinfoRoot class]
                                          file:DeviceinfoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(device_sn_info__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - device_voice_assistant

@implementation device_voice_assistant

@dynamic fwMajorVersion;
@dynamic fwMinorVersion;
@dynamic fwType;
@dynamic nwMajorVersion;
@dynamic nwMinorrVersion;
@dynamic nwType;
@dynamic currentLanguage;
@dynamic switchLanguage;

typedef struct device_voice_assistant__storage_ {
  uint32_t _has_storage_[1];
  uint32_t fwMajorVersion;
  uint32_t fwMinorVersion;
  uint32_t fwType;
  uint32_t nwMajorVersion;
  uint32_t nwMinorrVersion;
  uint32_t nwType;
  uint32_t currentLanguage;
  uint32_t switchLanguage;
} device_voice_assistant__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fwMajorVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = device_voice_assistant_FieldNumber_FwMajorVersion,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(device_voice_assistant__storage_, fwMajorVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "fwMinorVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = device_voice_assistant_FieldNumber_FwMinorVersion,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(device_voice_assistant__storage_, fwMinorVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "fwType",
        .dataTypeSpecific.clazz = Nil,
        .number = device_voice_assistant_FieldNumber_FwType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(device_voice_assistant__storage_, fwType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nwMajorVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = device_voice_assistant_FieldNumber_NwMajorVersion,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(device_voice_assistant__storage_, nwMajorVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nwMinorrVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = device_voice_assistant_FieldNumber_NwMinorrVersion,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(device_voice_assistant__storage_, nwMinorrVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nwType",
        .dataTypeSpecific.clazz = Nil,
        .number = device_voice_assistant_FieldNumber_NwType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(device_voice_assistant__storage_, nwType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "currentLanguage",
        .dataTypeSpecific.clazz = Nil,
        .number = device_voice_assistant_FieldNumber_CurrentLanguage,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(device_voice_assistant__storage_, currentLanguage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "switchLanguage",
        .dataTypeSpecific.clazz = Nil,
        .number = device_voice_assistant_FieldNumber_SwitchLanguage,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(device_voice_assistant__storage_, switchLanguage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[device_voice_assistant class]
                                     rootClass:[DeviceinfoRoot class]
                                          file:DeviceinfoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(device_voice_assistant__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - protocol_device_info

@implementation protocol_device_info

@dynamic deviceId;
@dynamic majorVersion;
@dynamic minorVersion;
@dynamic microVersion;
@dynamic pairFlag;
@dynamic platform;
@dynamic shape;
@dynamic devType;
@dynamic macAddr;
@dynamic btAddr;
@dynamic hasBattInfo, battInfo;
@dynamic hasBtName, btName;
@dynamic fontMajorVersion;
@dynamic fontMinorVersion;
@dynamic fontMicroVersion;
@dynamic rebootFlag;
@dynamic hasHwSupport, hwSupport;
@dynamic gpsSocName;
@dynamic hasSizeInfo, sizeInfo;
@dynamic isRecoveryMode;
@dynamic deviceColor;
@dynamic platePhotoPicSupportNum;
@dynamic hasSnInfo, snInfo;
@dynamic hasVoiceAssistant, voiceAssistant;
@dynamic heartratePush;

typedef struct protocol_device_info__storage_ {
  uint32_t _has_storage_[1];
  uint32_t deviceId;
  uint32_t majorVersion;
  uint32_t minorVersion;
  uint32_t microVersion;
  uint32_t pairFlag;
  Platform platform;
  Shape shape;
  Dev_type devType;
  uint32_t fontMajorVersion;
  uint32_t fontMinorVersion;
  uint32_t fontMicroVersion;
  uint32_t rebootFlag;
  uint32_t deviceColor;
  uint32_t platePhotoPicSupportNum;
  NSData *macAddr;
  NSData *btAddr;
  protocol_device_batt_info *battInfo;
  protocol_bt_name *btName;
  hardware_support *hwSupport;
  NSString *gpsSocName;
  device_size_info *sizeInfo;
  device_sn_info *snInfo;
  device_voice_assistant *voiceAssistant;
} protocol_device_info__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "deviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_info_FieldNumber_DeviceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "majorVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_info_FieldNumber_MajorVersion,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, majorVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "minorVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_info_FieldNumber_MinorVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, minorVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "microVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_info_FieldNumber_MicroVersion,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, microVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pairFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_info_FieldNumber_PairFlag,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, pairFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "platform",
        .dataTypeSpecific.enumDescFunc = Platform_EnumDescriptor,
        .number = protocol_device_info_FieldNumber_Platform,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, platform),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "shape",
        .dataTypeSpecific.enumDescFunc = Shape_EnumDescriptor,
        .number = protocol_device_info_FieldNumber_Shape,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, shape),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "devType",
        .dataTypeSpecific.enumDescFunc = Dev_type_EnumDescriptor,
        .number = protocol_device_info_FieldNumber_DevType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, devType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "macAddr",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_info_FieldNumber_MacAddr,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, macAddr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "btAddr",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_info_FieldNumber_BtAddr,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, btAddr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "battInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(protocol_device_batt_info),
        .number = protocol_device_info_FieldNumber_BattInfo,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, battInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "btName",
        .dataTypeSpecific.clazz = GPBObjCClass(protocol_bt_name),
        .number = protocol_device_info_FieldNumber_BtName,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, btName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fontMajorVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_info_FieldNumber_FontMajorVersion,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, fontMajorVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "fontMinorVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_info_FieldNumber_FontMinorVersion,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, fontMinorVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "fontMicroVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_info_FieldNumber_FontMicroVersion,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, fontMicroVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "rebootFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_info_FieldNumber_RebootFlag,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, rebootFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hwSupport",
        .dataTypeSpecific.clazz = GPBObjCClass(hardware_support),
        .number = protocol_device_info_FieldNumber_HwSupport,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, hwSupport),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gpsSocName",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_info_FieldNumber_GpsSocName,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, gpsSocName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sizeInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(device_size_info),
        .number = protocol_device_info_FieldNumber_SizeInfo,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, sizeInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isRecoveryMode",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_info_FieldNumber_IsRecoveryMode,
        .hasIndex = 19,
        .offset = 20,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "deviceColor",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_info_FieldNumber_DeviceColor,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, deviceColor),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "platePhotoPicSupportNum",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_info_FieldNumber_PlatePhotoPicSupportNum,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, platePhotoPicSupportNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "snInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(device_sn_info),
        .number = protocol_device_info_FieldNumber_SnInfo,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, snInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "voiceAssistant",
        .dataTypeSpecific.clazz = GPBObjCClass(device_voice_assistant),
        .number = protocol_device_info_FieldNumber_VoiceAssistant,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(protocol_device_info__storage_, voiceAssistant),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "heartratePush",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_device_info_FieldNumber_HeartratePush,
        .hasIndex = 25,
        .offset = 26,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[protocol_device_info class]
                                     rootClass:[DeviceinfoRoot class]
                                          file:DeviceinfoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(protocol_device_info__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t protocol_device_info_Platform_RawValue(protocol_device_info *message) {
  GPBDescriptor *descriptor = [protocol_device_info descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_device_info_FieldNumber_Platform];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_device_info_Platform_RawValue(protocol_device_info *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_device_info descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_device_info_FieldNumber_Platform];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t protocol_device_info_Shape_RawValue(protocol_device_info *message) {
  GPBDescriptor *descriptor = [protocol_device_info descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_device_info_FieldNumber_Shape];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_device_info_Shape_RawValue(protocol_device_info *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_device_info descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_device_info_FieldNumber_Shape];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t protocol_device_info_DevType_RawValue(protocol_device_info *message) {
  GPBDescriptor *descriptor = [protocol_device_info descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_device_info_FieldNumber_DevType];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_device_info_DevType_RawValue(protocol_device_info *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_device_info descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_device_info_FieldNumber_DevType];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
