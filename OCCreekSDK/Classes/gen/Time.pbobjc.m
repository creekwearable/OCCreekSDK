// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: time.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Time.pbobjc.h"
#import "Enums.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(protocol_time);

#pragma mark - TimeRoot

@implementation TimeRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - TimeRoot_FileDescriptor

static GPBFileDescriptor *TimeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - protocol_time

@implementation protocol_time

@dynamic year;
@dynamic month;
@dynamic day;
@dynamic hour;
@dynamic minute;
@dynamic second;
@dynamic week;
@dynamic utcTime;
@dynamic timeZone;

typedef struct protocol_time__storage_ {
  uint32_t _has_storage_[1];
  uint32_t year;
  uint32_t month;
  uint32_t day;
  uint32_t hour;
  uint32_t minute;
  uint32_t second;
  uint32_t week;
  uint32_t utcTime;
  uint32_t timeZone;
} protocol_time__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "year",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_time_FieldNumber_Year,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(protocol_time__storage_, year),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "month",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_time_FieldNumber_Month,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(protocol_time__storage_, month),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "day",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_time_FieldNumber_Day,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(protocol_time__storage_, day),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hour",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_time_FieldNumber_Hour,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(protocol_time__storage_, hour),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "minute",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_time_FieldNumber_Minute,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(protocol_time__storage_, minute),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "second",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_time_FieldNumber_Second,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(protocol_time__storage_, second),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "week",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_time_FieldNumber_Week,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(protocol_time__storage_, week),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "utcTime",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_time_FieldNumber_UtcTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(protocol_time__storage_, utcTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "timeZone",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_time_FieldNumber_TimeZone,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(protocol_time__storage_, timeZone),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[protocol_time class]
                                     rootClass:[TimeRoot class]
                                          file:TimeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(protocol_time__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - protocol_device_time_operate

@implementation protocol_device_time_operate

@dynamic operate;
@dynamic hasTime, time;

typedef struct protocol_device_time_operate__storage_ {
  uint32_t _has_storage_[1];
  operate_type operate;
  protocol_time *time;
} protocol_device_time_operate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "operate",
        .dataTypeSpecific.enumDescFunc = operate_type_EnumDescriptor,
        .number = protocol_device_time_operate_FieldNumber_Operate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(protocol_device_time_operate__storage_, operate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "time",
        .dataTypeSpecific.clazz = GPBObjCClass(protocol_time),
        .number = protocol_device_time_operate_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(protocol_device_time_operate__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[protocol_device_time_operate class]
                                     rootClass:[TimeRoot class]
                                          file:TimeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(protocol_device_time_operate__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t protocol_device_time_operate_Operate_RawValue(protocol_device_time_operate *message) {
  GPBDescriptor *descriptor = [protocol_device_time_operate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_device_time_operate_FieldNumber_Operate];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_device_time_operate_Operate_RawValue(protocol_device_time_operate *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_device_time_operate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_device_time_operate_FieldNumber_Operate];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - protocol_device_time_inquire_reply

@implementation protocol_device_time_inquire_reply

@dynamic operate;
@dynamic hasTime, time;

typedef struct protocol_device_time_inquire_reply__storage_ {
  uint32_t _has_storage_[1];
  operate_type operate;
  protocol_time *time;
} protocol_device_time_inquire_reply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "operate",
        .dataTypeSpecific.enumDescFunc = operate_type_EnumDescriptor,
        .number = protocol_device_time_inquire_reply_FieldNumber_Operate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(protocol_device_time_inquire_reply__storage_, operate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "time",
        .dataTypeSpecific.clazz = GPBObjCClass(protocol_time),
        .number = protocol_device_time_inquire_reply_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(protocol_device_time_inquire_reply__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[protocol_device_time_inquire_reply class]
                                     rootClass:[TimeRoot class]
                                          file:TimeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(protocol_device_time_inquire_reply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t protocol_device_time_inquire_reply_Operate_RawValue(protocol_device_time_inquire_reply *message) {
  GPBDescriptor *descriptor = [protocol_device_time_inquire_reply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_device_time_inquire_reply_FieldNumber_Operate];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_device_time_inquire_reply_Operate_RawValue(protocol_device_time_inquire_reply *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_device_time_inquire_reply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_device_time_inquire_reply_FieldNumber_Operate];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
