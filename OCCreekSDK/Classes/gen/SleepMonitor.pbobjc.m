// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sleepMonitor.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "SleepMonitor.pbobjc.h"
#import "Enums.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SleepMonitorRoot

@implementation SleepMonitorRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - SleepMonitorRoot_FileDescriptor

static GPBFileDescriptor *SleepMonitorRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - protocol_sleep_monitor_operate

@implementation protocol_sleep_monitor_operate

@dynamic operate;
@dynamic sleepMode;
@dynamic switchFlag;

typedef struct protocol_sleep_monitor_operate__storage_ {
  uint32_t _has_storage_[1];
  operate_type operate;
  sleep_monitor_type sleepMode;
} protocol_sleep_monitor_operate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "operate",
        .dataTypeSpecific.enumDescFunc = operate_type_EnumDescriptor,
        .number = protocol_sleep_monitor_operate_FieldNumber_Operate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(protocol_sleep_monitor_operate__storage_, operate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sleepMode",
        .dataTypeSpecific.enumDescFunc = sleep_monitor_type_EnumDescriptor,
        .number = protocol_sleep_monitor_operate_FieldNumber_SleepMode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(protocol_sleep_monitor_operate__storage_, sleepMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "switchFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_sleep_monitor_operate_FieldNumber_SwitchFlag,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[protocol_sleep_monitor_operate class]
                                     rootClass:[SleepMonitorRoot class]
                                          file:SleepMonitorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(protocol_sleep_monitor_operate__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t protocol_sleep_monitor_operate_Operate_RawValue(protocol_sleep_monitor_operate *message) {
  GPBDescriptor *descriptor = [protocol_sleep_monitor_operate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_sleep_monitor_operate_FieldNumber_Operate];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_sleep_monitor_operate_Operate_RawValue(protocol_sleep_monitor_operate *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_sleep_monitor_operate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_sleep_monitor_operate_FieldNumber_Operate];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t protocol_sleep_monitor_operate_SleepMode_RawValue(protocol_sleep_monitor_operate *message) {
  GPBDescriptor *descriptor = [protocol_sleep_monitor_operate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_sleep_monitor_operate_FieldNumber_SleepMode];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_sleep_monitor_operate_SleepMode_RawValue(protocol_sleep_monitor_operate *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_sleep_monitor_operate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_sleep_monitor_operate_FieldNumber_SleepMode];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - protocol_sleep_monitor_inquire_reply

@implementation protocol_sleep_monitor_inquire_reply

@dynamic operate;
@dynamic sleepMode;
@dynamic switchFlag;

typedef struct protocol_sleep_monitor_inquire_reply__storage_ {
  uint32_t _has_storage_[1];
  operate_type operate;
  sleep_monitor_type sleepMode;
} protocol_sleep_monitor_inquire_reply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "operate",
        .dataTypeSpecific.enumDescFunc = operate_type_EnumDescriptor,
        .number = protocol_sleep_monitor_inquire_reply_FieldNumber_Operate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(protocol_sleep_monitor_inquire_reply__storage_, operate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sleepMode",
        .dataTypeSpecific.enumDescFunc = sleep_monitor_type_EnumDescriptor,
        .number = protocol_sleep_monitor_inquire_reply_FieldNumber_SleepMode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(protocol_sleep_monitor_inquire_reply__storage_, sleepMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "switchFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_sleep_monitor_inquire_reply_FieldNumber_SwitchFlag,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[protocol_sleep_monitor_inquire_reply class]
                                     rootClass:[SleepMonitorRoot class]
                                          file:SleepMonitorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(protocol_sleep_monitor_inquire_reply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t protocol_sleep_monitor_inquire_reply_Operate_RawValue(protocol_sleep_monitor_inquire_reply *message) {
  GPBDescriptor *descriptor = [protocol_sleep_monitor_inquire_reply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_sleep_monitor_inquire_reply_FieldNumber_Operate];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_sleep_monitor_inquire_reply_Operate_RawValue(protocol_sleep_monitor_inquire_reply *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_sleep_monitor_inquire_reply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_sleep_monitor_inquire_reply_FieldNumber_Operate];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t protocol_sleep_monitor_inquire_reply_SleepMode_RawValue(protocol_sleep_monitor_inquire_reply *message) {
  GPBDescriptor *descriptor = [protocol_sleep_monitor_inquire_reply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_sleep_monitor_inquire_reply_FieldNumber_SleepMode];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_sleep_monitor_inquire_reply_SleepMode_RawValue(protocol_sleep_monitor_inquire_reply *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_sleep_monitor_inquire_reply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_sleep_monitor_inquire_reply_FieldNumber_SleepMode];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
