// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deviceinfo.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class device_size_info;
@class device_sn_info;
@class device_voice_assistant;
@class hardware_support;
@class protocol_bt_name;
@class protocol_device_batt_info;
GPB_ENUM_FWD_DECLARE(Batt_mode);
GPB_ENUM_FWD_DECLARE(Batt_status);
GPB_ENUM_FWD_DECLARE(Dev_type);
GPB_ENUM_FWD_DECLARE(Platform);
GPB_ENUM_FWD_DECLARE(Shape);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - DeviceinfoRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface DeviceinfoRoot : GPBRootObject
@end

#pragma mark - protocol_device_batt_info

typedef GPB_ENUM(protocol_device_batt_info_FieldNumber) {
  protocol_device_batt_info_FieldNumber_Voltage = 1,
  protocol_device_batt_info_FieldNumber_Status = 2,
  protocol_device_batt_info_FieldNumber_BattLevel = 3,
  protocol_device_batt_info_FieldNumber_LastChargingYear = 4,
  protocol_device_batt_info_FieldNumber_LastChargingMonth = 5,
  protocol_device_batt_info_FieldNumber_LastChargingDay = 6,
  protocol_device_batt_info_FieldNumber_LastChargingHour = 7,
  protocol_device_batt_info_FieldNumber_LastChargingMinute = 8,
  protocol_device_batt_info_FieldNumber_LastChargingSecond = 9,
  protocol_device_batt_info_FieldNumber_Mode = 10,
};

GPB_FINAL @interface protocol_device_batt_info : GPBMessage

/**
 *    enum Batt_mode
 *    {
 *        INVALID_MODE = 0; // invalid
 *        NORMAL_MODE = 1;//normal mode (not power saving mode)
 *        ECO_MODE = 2; //power saving mode
 *    }
 *    enum Batt_status
 *    {
 *        NORMAL = 0; // not charging
 *        CHARING = 1;//charging
 *        FULL = 2; //full charge
 *        LOW = 3; //low battery
 *    }
 **/
@property(nonatomic, readwrite) uint32_t voltage;

/** 1bytes battery status */
@property(nonatomic, readwrite) enum Batt_status status;

/** 1bytes */
@property(nonatomic, readwrite) uint32_t battLevel;

/** 2bytes */
@property(nonatomic, readwrite) uint32_t lastChargingYear;

/** 1bytes */
@property(nonatomic, readwrite) uint32_t lastChargingMonth;

/** 1bytes */
@property(nonatomic, readwrite) uint32_t lastChargingDay;

/** 1bytes */
@property(nonatomic, readwrite) uint32_t lastChargingHour;

/** 1bytes */
@property(nonatomic, readwrite) uint32_t lastChargingMinute;

/** 1bytes */
@property(nonatomic, readwrite) uint32_t lastChargingSecond;

/** 1bytes 0x01: mode */
@property(nonatomic, readwrite) enum Batt_mode mode;

@end

/**
 * Fetches the raw value of a @c protocol_device_batt_info's @c status property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t protocol_device_batt_info_Status_RawValue(protocol_device_batt_info *message);
/**
 * Sets the raw value of an @c protocol_device_batt_info's @c status property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void Setprotocol_device_batt_info_Status_RawValue(protocol_device_batt_info *message, int32_t value);

/**
 * Fetches the raw value of a @c protocol_device_batt_info's @c mode property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t protocol_device_batt_info_Mode_RawValue(protocol_device_batt_info *message);
/**
 * Sets the raw value of an @c protocol_device_batt_info's @c mode property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void Setprotocol_device_batt_info_Mode_RawValue(protocol_device_batt_info *message, int32_t value);

#pragma mark - protocol_bt_name

typedef GPB_ENUM(protocol_bt_name_FieldNumber) {
  protocol_bt_name_FieldNumber_IsSupport = 1,
  protocol_bt_name_FieldNumber_BtName = 2,
};

GPB_FINAL @interface protocol_bt_name : GPBMessage

/** Whether bt is supported, if it is supported, you can get the bt Bluetooth name, which is required for ios */
@property(nonatomic, readwrite) BOOL isSupport;

/** max:16bytes */
@property(nonatomic, readwrite, copy, null_resettable) NSData *btName;

@end

#pragma mark - device_size_info

typedef GPB_ENUM(device_size_info_FieldNumber) {
  device_size_info_FieldNumber_Width = 1,
  device_size_info_FieldNumber_Height = 2,
  device_size_info_FieldNumber_Angle = 3,
};

GPB_FINAL @interface device_size_info : GPBMessage

/** 2bytes wide */
@property(nonatomic, readwrite) uint32_t width;

/** 2bytes high */
@property(nonatomic, readwrite) uint32_t height;

/** 2bytes fillet angle */
@property(nonatomic, readwrite) uint32_t angle;

@end

#pragma mark - hardware_support

typedef GPB_ENUM(hardware_support_FieldNumber) {
  hardware_support_FieldNumber_HeartrateHardware = 1,
  hardware_support_FieldNumber_AccHardware = 2,
  hardware_support_FieldNumber_GyroHardware = 3,
  hardware_support_FieldNumber_ButtonHardware = 4,
  hardware_support_FieldNumber_LcdHardware = 5,
  hardware_support_FieldNumber_TpHardware = 6,
  hardware_support_FieldNumber_MotorHardware = 7,
  hardware_support_FieldNumber_MicHardware = 8,
  hardware_support_FieldNumber_SpeakHardware = 9,
  hardware_support_FieldNumber_GpsHardware = 10,
  hardware_support_FieldNumber_NorflashHardware = 11,
  hardware_support_FieldNumber_NandflashHardware = 12,
};

GPB_FINAL @interface hardware_support : GPBMessage

/** Heart rate sensor */
@property(nonatomic, readwrite) BOOL heartrateHardware;

/** acc sensor */
@property(nonatomic, readwrite) BOOL accHardware;

/** Gyroscope sensor */
@property(nonatomic, readwrite) BOOL gyroHardware;

/** Button */
@property(nonatomic, readwrite) BOOL buttonHardware;

/** Screen */
@property(nonatomic, readwrite) BOOL lcdHardware;

/** tp */
@property(nonatomic, readwrite) BOOL tpHardware;

/** motor */
@property(nonatomic, readwrite) BOOL motorHardware;

/** Microphone */
@property(nonatomic, readwrite) BOOL micHardware;

/** Speaker */
@property(nonatomic, readwrite) BOOL speakHardware;

/** gps */
@property(nonatomic, readwrite) BOOL gpsHardware;

/** nor_flash */
@property(nonatomic, readwrite) BOOL norflashHardware;

/** nand_flash */
@property(nonatomic, readwrite) BOOL nandflashHardware;

@end

#pragma mark - device_sn_info

typedef GPB_ENUM(device_sn_info_FieldNumber) {
  device_sn_info_FieldNumber_ProductId = 1,
  device_sn_info_FieldNumber_FactoryId = 2,
  device_sn_info_FieldNumber_CustomerId = 3,
  device_sn_info_FieldNumber_ProductionDate = 4,
  device_sn_info_FieldNumber_BatchNum = 5,
  device_sn_info_FieldNumber_SerialNum = 6,
  device_sn_info_FieldNumber_ColorCode = 7,
};

GPB_FINAL @interface device_sn_info : GPBMessage

/** Product series identification */
@property(nonatomic, readwrite) uint32_t productId;

/** Factory identification */
@property(nonatomic, readwrite) uint32_t factoryId;

/** Customer ID */
@property(nonatomic, readwrite) uint32_t customerId;

/** Year, month and day of production */
@property(nonatomic, readwrite) uint32_t productionDate;

/** batch number */
@property(nonatomic, readwrite) uint32_t batchNum;

/** sequential number */
@property(nonatomic, readwrite) uint32_t serialNum;

/** Color code */
@property(nonatomic, readwrite) uint32_t colorCode;

@end

#pragma mark - device_voice_assistant

typedef GPB_ENUM(device_voice_assistant_FieldNumber) {
  device_voice_assistant_FieldNumber_FwMajorVersion = 1,
  device_voice_assistant_FieldNumber_FwMinorVersion = 2,
  device_voice_assistant_FieldNumber_FwType = 3,
  device_voice_assistant_FieldNumber_NwMajorVersion = 4,
  device_voice_assistant_FieldNumber_NwMinorrVersion = 5,
  device_voice_assistant_FieldNumber_NwType = 6,
  device_voice_assistant_FieldNumber_CurrentLanguage = 7,
  device_voice_assistant_FieldNumber_SwitchLanguage = 8,
};

GPB_FINAL @interface device_voice_assistant : GPBMessage

/** Firmware major version number */
@property(nonatomic, readwrite) uint32_t fwMajorVersion;

/** Firmware minor version number */
@property(nonatomic, readwrite) uint32_t fwMinorVersion;

/** Firmware language type 1 Chinese 2 English */
@property(nonatomic, readwrite) uint32_t fwType;

/** Network major version number */
@property(nonatomic, readwrite) uint32_t nwMajorVersion;

/** Network minor version number */
@property(nonatomic, readwrite) uint32_t nwMinorrVersion;

/** Internet language type */
@property(nonatomic, readwrite) uint32_t nwType;

/** Current language //1 Chinese, 2 English */
@property(nonatomic, readwrite) uint32_t currentLanguage;

/** Whether to switch language 0 means switching 1 means not switching */
@property(nonatomic, readwrite) uint32_t switchLanguage;

@end

#pragma mark - protocol_device_info

typedef GPB_ENUM(protocol_device_info_FieldNumber) {
  protocol_device_info_FieldNumber_DeviceId = 1,
  protocol_device_info_FieldNumber_MajorVersion = 2,
  protocol_device_info_FieldNumber_MinorVersion = 3,
  protocol_device_info_FieldNumber_MicroVersion = 4,
  protocol_device_info_FieldNumber_PairFlag = 5,
  protocol_device_info_FieldNumber_Platform = 6,
  protocol_device_info_FieldNumber_Shape = 7,
  protocol_device_info_FieldNumber_DevType = 8,
  protocol_device_info_FieldNumber_MacAddr = 9,
  protocol_device_info_FieldNumber_BtAddr = 10,
  protocol_device_info_FieldNumber_BattInfo = 11,
  protocol_device_info_FieldNumber_BtName = 12,
  protocol_device_info_FieldNumber_FontMajorVersion = 13,
  protocol_device_info_FieldNumber_FontMinorVersion = 14,
  protocol_device_info_FieldNumber_FontMicroVersion = 15,
  protocol_device_info_FieldNumber_RebootFlag = 16,
  protocol_device_info_FieldNumber_HwSupport = 17,
  protocol_device_info_FieldNumber_GpsSocName = 18,
  protocol_device_info_FieldNumber_SizeInfo = 19,
  protocol_device_info_FieldNumber_IsRecoveryMode = 20,
  protocol_device_info_FieldNumber_DeviceColor = 21,
  protocol_device_info_FieldNumber_PlatePhotoPicSupportNum = 22,
  protocol_device_info_FieldNumber_SnInfo = 23,
  protocol_device_info_FieldNumber_VoiceAssistant = 24,
  protocol_device_info_FieldNumber_HeartratePush = 25,
};

GPB_FINAL @interface protocol_device_info : GPBMessage

/** 2bytes device id */
@property(nonatomic, readwrite) uint32_t deviceId;

/** 1bytes firmware major version number */
@property(nonatomic, readwrite) uint32_t majorVersion;

/** 1bytes firmware minor version number */
@property(nonatomic, readwrite) uint32_t minorVersion;

/** 1bytes firmware minor version number */
@property(nonatomic, readwrite) uint32_t microVersion;

/** 1bytes binding status */
@property(nonatomic, readwrite) uint32_t pairFlag;

/** 1bytes watch platform */
@property(nonatomic, readwrite) enum Platform platform;

/** 1bytes device shape */
@property(nonatomic, readwrite) enum Shape shape;

/** Device type */
@property(nonatomic, readwrite) enum Dev_type devType;

/** max:6bytes ble Bluetooth address */
@property(nonatomic, readwrite, copy, null_resettable) NSData *macAddr;

/** max:6bytes bt Bluetooth address */
@property(nonatomic, readwrite, copy, null_resettable) NSData *btAddr;

@property(nonatomic, readwrite, strong, null_resettable) protocol_device_batt_info *battInfo;
/** Test to see if @c battInfo has been set. */
@property(nonatomic, readwrite) BOOL hasBattInfo;

@property(nonatomic, readwrite, strong, null_resettable) protocol_bt_name *btName;
/** Test to see if @c btName has been set. */
@property(nonatomic, readwrite) BOOL hasBtName;

/** 1bytes font major version number */
@property(nonatomic, readwrite) uint32_t fontMajorVersion;

/** 1bytes font minor version number */
@property(nonatomic, readwrite) uint32_t fontMinorVersion;

/** 1bytes font small version number */
@property(nonatomic, readwrite) uint32_t fontMicroVersion;

/** 1bytes reboot flag */
@property(nonatomic, readwrite) uint32_t rebootFlag;

/** Hardware support */
@property(nonatomic, readwrite, strong, null_resettable) hardware_support *hwSupport;
/** Test to see if @c hwSupport has been set. */
@property(nonatomic, readwrite) BOOL hasHwSupport;

/** gps chip model */
@property(nonatomic, readwrite, copy, null_resettable) NSString *gpsSocName;

/** Device specification size */
@property(nonatomic, readwrite, strong, null_resettable) device_size_info *sizeInfo;
/** Test to see if @c sizeInfo has been set. */
@property(nonatomic, readwrite) BOOL hasSizeInfo;

/** 1bytes recovery mode flag */
@property(nonatomic, readwrite) BOOL isRecoveryMode;

/** 1bytes device color: dark gold (SN code: A), titanium silver (SN code: B), champagne gold (SN code: C), rose pink (SN code: D), jasmine red (SN Codename: E), Dai Zi (SN codename: F) */
@property(nonatomic, readwrite) uint32_t deviceColor;

/** 1bytes The number of photos supported by the photo dial */
@property(nonatomic, readwrite) uint32_t platePhotoPicSupportNum;

/** SN code */
@property(nonatomic, readwrite, strong, null_resettable) device_sn_info *snInfo;
/** Test to see if @c snInfo has been set. */
@property(nonatomic, readwrite) BOOL hasSnInfo;

/** Voice assistant device */
@property(nonatomic, readwrite, strong, null_resettable) device_voice_assistant *voiceAssistant;
/** Test to see if @c voiceAssistant has been set. */
@property(nonatomic, readwrite) BOOL hasVoiceAssistant;

/** Whether to start heart rate push */
@property(nonatomic, readwrite) BOOL heartratePush;

@end

/**
 * Fetches the raw value of a @c protocol_device_info's @c platform property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t protocol_device_info_Platform_RawValue(protocol_device_info *message);
/**
 * Sets the raw value of an @c protocol_device_info's @c platform property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void Setprotocol_device_info_Platform_RawValue(protocol_device_info *message, int32_t value);

/**
 * Fetches the raw value of a @c protocol_device_info's @c shape property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t protocol_device_info_Shape_RawValue(protocol_device_info *message);
/**
 * Sets the raw value of an @c protocol_device_info's @c shape property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void Setprotocol_device_info_Shape_RawValue(protocol_device_info *message, int32_t value);

/**
 * Fetches the raw value of a @c protocol_device_info's @c devType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t protocol_device_info_DevType_RawValue(protocol_device_info *message);
/**
 * Sets the raw value of an @c protocol_device_info's @c devType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void Setprotocol_device_info_DevType_RawValue(protocol_device_info *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
