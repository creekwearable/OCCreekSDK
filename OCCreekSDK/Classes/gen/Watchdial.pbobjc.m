// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: watchdial.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Watchdial.pbobjc.h"
#import "Enums.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(protocol_watch_dial_plate_list_item);

#pragma mark - WatchdialRoot

@implementation WatchdialRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - WatchdialRoot_FileDescriptor

static GPBFileDescriptor *WatchdialRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - protocol_watch_dial_plate_list_item

@implementation protocol_watch_dial_plate_list_item

@dynamic dialType;
@dynamic version;
@dynamic dialSize;
@dynamic dialName;

typedef struct protocol_watch_dial_plate_list_item__storage_ {
  uint32_t _has_storage_[1];
  dial_type dialType;
  uint32_t version;
  uint32_t dialSize;
  NSData *dialName;
} protocol_watch_dial_plate_list_item__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dialType",
        .dataTypeSpecific.enumDescFunc = dial_type_EnumDescriptor,
        .number = protocol_watch_dial_plate_list_item_FieldNumber_DialType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_list_item__storage_, dialType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_list_item_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_list_item__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dialSize",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_list_item_FieldNumber_DialSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_list_item__storage_, dialSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dialName",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_list_item_FieldNumber_DialName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_list_item__storage_, dialName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[protocol_watch_dial_plate_list_item class]
                                     rootClass:[WatchdialRoot class]
                                          file:WatchdialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(protocol_watch_dial_plate_list_item__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t protocol_watch_dial_plate_list_item_DialType_RawValue(protocol_watch_dial_plate_list_item *message) {
  GPBDescriptor *descriptor = [protocol_watch_dial_plate_list_item descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_watch_dial_plate_list_item_FieldNumber_DialType];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_watch_dial_plate_list_item_DialType_RawValue(protocol_watch_dial_plate_list_item *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_watch_dial_plate_list_item descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_watch_dial_plate_list_item_FieldNumber_DialType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - protocol_watch_dial_plate_operate

@implementation protocol_watch_dial_plate_operate

@dynamic operate;
@dynamic dialNameArray, dialNameArray_Count;
@dynamic dialListSortArray, dialListSortArray_Count;

typedef struct protocol_watch_dial_plate_operate__storage_ {
  uint32_t _has_storage_[1];
  dial_operate_type operate;
  NSMutableArray *dialNameArray;
  NSMutableArray *dialListSortArray;
} protocol_watch_dial_plate_operate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "operate",
        .dataTypeSpecific.enumDescFunc = dial_operate_type_EnumDescriptor,
        .number = protocol_watch_dial_plate_operate_FieldNumber_Operate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_operate__storage_, operate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "dialNameArray",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_operate_FieldNumber_DialNameArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_operate__storage_, dialNameArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "dialListSortArray",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_operate_FieldNumber_DialListSortArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_operate__storage_, dialListSortArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[protocol_watch_dial_plate_operate class]
                                     rootClass:[WatchdialRoot class]
                                          file:WatchdialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(protocol_watch_dial_plate_operate__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t protocol_watch_dial_plate_operate_Operate_RawValue(protocol_watch_dial_plate_operate *message) {
  GPBDescriptor *descriptor = [protocol_watch_dial_plate_operate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_watch_dial_plate_operate_FieldNumber_Operate];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_watch_dial_plate_operate_Operate_RawValue(protocol_watch_dial_plate_operate *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_watch_dial_plate_operate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_watch_dial_plate_operate_FieldNumber_Operate];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - protocol_watch_dial_plate_inquire_reply

@implementation protocol_watch_dial_plate_inquire_reply

@dynamic operate;
@dynamic formulaMode;
@dynamic plateVersion;
@dynamic cloudPlateNum;
@dynamic userCloudPlateNum;
@dynamic photoPlateNum;
@dynamic userPhotoPlateNum;
@dynamic wallpaperPlateNum;
@dynamic userWallpaperPlateNum;
@dynamic listItemArray, listItemArray_Count;
@dynamic totalSize;
@dynamic userCloudSize;
@dynamic userPhotoSize;
@dynamic nowShowPlateName;
@dynamic enableCompress;
@dynamic funcTable;
@dynamic platePhotoPicSupportNum;
@dynamic allPlateSupportMax;

typedef struct protocol_watch_dial_plate_inquire_reply__storage_ {
  uint32_t _has_storage_[1];
  dial_operate_type operate;
  uint32_t formulaMode;
  uint32_t plateVersion;
  uint32_t cloudPlateNum;
  uint32_t userCloudPlateNum;
  uint32_t photoPlateNum;
  uint32_t userPhotoPlateNum;
  uint32_t wallpaperPlateNum;
  uint32_t userWallpaperPlateNum;
  uint32_t totalSize;
  uint32_t userCloudSize;
  uint32_t userPhotoSize;
  uint32_t enableCompress;
  uint32_t funcTable;
  uint32_t platePhotoPicSupportNum;
  uint32_t allPlateSupportMax;
  NSMutableArray *listItemArray;
  NSData *nowShowPlateName;
} protocol_watch_dial_plate_inquire_reply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "operate",
        .dataTypeSpecific.enumDescFunc = dial_operate_type_EnumDescriptor,
        .number = protocol_watch_dial_plate_inquire_reply_FieldNumber_Operate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_inquire_reply__storage_, operate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "formulaMode",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_inquire_reply_FieldNumber_FormulaMode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_inquire_reply__storage_, formulaMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "plateVersion",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_inquire_reply_FieldNumber_PlateVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_inquire_reply__storage_, plateVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cloudPlateNum",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_inquire_reply_FieldNumber_CloudPlateNum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_inquire_reply__storage_, cloudPlateNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userCloudPlateNum",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_inquire_reply_FieldNumber_UserCloudPlateNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_inquire_reply__storage_, userCloudPlateNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "photoPlateNum",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_inquire_reply_FieldNumber_PhotoPlateNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_inquire_reply__storage_, photoPlateNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userPhotoPlateNum",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_inquire_reply_FieldNumber_UserPhotoPlateNum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_inquire_reply__storage_, userPhotoPlateNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "wallpaperPlateNum",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_inquire_reply_FieldNumber_WallpaperPlateNum,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_inquire_reply__storage_, wallpaperPlateNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userWallpaperPlateNum",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_inquire_reply_FieldNumber_UserWallpaperPlateNum,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_inquire_reply__storage_, userWallpaperPlateNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listItemArray",
        .dataTypeSpecific.clazz = GPBObjCClass(protocol_watch_dial_plate_list_item),
        .number = protocol_watch_dial_plate_inquire_reply_FieldNumber_ListItemArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_inquire_reply__storage_, listItemArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalSize",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_inquire_reply_FieldNumber_TotalSize,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_inquire_reply__storage_, totalSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userCloudSize",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_inquire_reply_FieldNumber_UserCloudSize,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_inquire_reply__storage_, userCloudSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userPhotoSize",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_inquire_reply_FieldNumber_UserPhotoSize,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_inquire_reply__storage_, userPhotoSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nowShowPlateName",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_inquire_reply_FieldNumber_NowShowPlateName,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_inquire_reply__storage_, nowShowPlateName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "enableCompress",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_inquire_reply_FieldNumber_EnableCompress,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_inquire_reply__storage_, enableCompress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "funcTable",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_inquire_reply_FieldNumber_FuncTable,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_inquire_reply__storage_, funcTable),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "platePhotoPicSupportNum",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_inquire_reply_FieldNumber_PlatePhotoPicSupportNum,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_inquire_reply__storage_, platePhotoPicSupportNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "allPlateSupportMax",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_watch_dial_plate_inquire_reply_FieldNumber_AllPlateSupportMax,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(protocol_watch_dial_plate_inquire_reply__storage_, allPlateSupportMax),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[protocol_watch_dial_plate_inquire_reply class]
                                     rootClass:[WatchdialRoot class]
                                          file:WatchdialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(protocol_watch_dial_plate_inquire_reply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t protocol_watch_dial_plate_inquire_reply_Operate_RawValue(protocol_watch_dial_plate_inquire_reply *message) {
  GPBDescriptor *descriptor = [protocol_watch_dial_plate_inquire_reply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_watch_dial_plate_inquire_reply_FieldNumber_Operate];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_watch_dial_plate_inquire_reply_Operate_RawValue(protocol_watch_dial_plate_inquire_reply *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_watch_dial_plate_inquire_reply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_watch_dial_plate_inquire_reply_FieldNumber_Operate];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
