// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: watchdial.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class protocol_watch_dial_plate_list_item;
GPB_ENUM_FWD_DECLARE(dial_operate_type);
GPB_ENUM_FWD_DECLARE(dial_type);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - WatchdialRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface WatchdialRoot : GPBRootObject
@end

#pragma mark - protocol_watch_dial_plate_list_item

typedef GPB_ENUM(protocol_watch_dial_plate_list_item_FieldNumber) {
  protocol_watch_dial_plate_list_item_FieldNumber_DialType = 1,
  protocol_watch_dial_plate_list_item_FieldNumber_Version = 2,
  protocol_watch_dial_plate_list_item_FieldNumber_DialSize = 3,
  protocol_watch_dial_plate_list_item_FieldNumber_DialName = 4,
};

GPB_FINAL @interface protocol_watch_dial_plate_list_item : GPBMessage

/** dial type */
@property(nonatomic, readwrite) enum dial_type dialType;

/** 2bytes current dial version number */
@property(nonatomic, readwrite) uint32_t version;

/** 4bytes current dial size */
@property(nonatomic, readwrite) uint32_t dialSize;

/** max:30 dial name */
@property(nonatomic, readwrite, copy, null_resettable) NSData *dialName;

@end

/**
 * Fetches the raw value of a @c protocol_watch_dial_plate_list_item's @c dialType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t protocol_watch_dial_plate_list_item_DialType_RawValue(protocol_watch_dial_plate_list_item *message);
/**
 * Sets the raw value of an @c protocol_watch_dial_plate_list_item's @c dialType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void Setprotocol_watch_dial_plate_list_item_DialType_RawValue(protocol_watch_dial_plate_list_item *message, int32_t value);

#pragma mark - protocol_watch_dial_plate_operate

typedef GPB_ENUM(protocol_watch_dial_plate_operate_FieldNumber) {
  protocol_watch_dial_plate_operate_FieldNumber_Operate = 1,
  protocol_watch_dial_plate_operate_FieldNumber_DialNameArray = 2,
  protocol_watch_dial_plate_operate_FieldNumber_DialListSortArray = 3,
};

GPB_FINAL @interface protocol_watch_dial_plate_operate : GPBMessage

/** 1bytes operation type */
@property(nonatomic, readwrite) enum dial_operate_type operate;

/** max:30 dial name */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSData*> *dialNameArray;
/** The number of items in @c dialNameArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dialNameArray_Count;

/** max:30 dial sort */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSData*> *dialListSortArray;
/** The number of items in @c dialListSortArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dialListSortArray_Count;

@end

/**
 * Fetches the raw value of a @c protocol_watch_dial_plate_operate's @c operate property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t protocol_watch_dial_plate_operate_Operate_RawValue(protocol_watch_dial_plate_operate *message);
/**
 * Sets the raw value of an @c protocol_watch_dial_plate_operate's @c operate property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void Setprotocol_watch_dial_plate_operate_Operate_RawValue(protocol_watch_dial_plate_operate *message, int32_t value);

#pragma mark - protocol_watch_dial_plate_inquire_reply

typedef GPB_ENUM(protocol_watch_dial_plate_inquire_reply_FieldNumber) {
  protocol_watch_dial_plate_inquire_reply_FieldNumber_Operate = 1,
  protocol_watch_dial_plate_inquire_reply_FieldNumber_FormulaMode = 2,
  protocol_watch_dial_plate_inquire_reply_FieldNumber_PlateVersion = 3,
  protocol_watch_dial_plate_inquire_reply_FieldNumber_CloudPlateNum = 4,
  protocol_watch_dial_plate_inquire_reply_FieldNumber_UserCloudPlateNum = 5,
  protocol_watch_dial_plate_inquire_reply_FieldNumber_PhotoPlateNum = 6,
  protocol_watch_dial_plate_inquire_reply_FieldNumber_UserPhotoPlateNum = 7,
  protocol_watch_dial_plate_inquire_reply_FieldNumber_WallpaperPlateNum = 8,
  protocol_watch_dial_plate_inquire_reply_FieldNumber_UserWallpaperPlateNum = 9,
  protocol_watch_dial_plate_inquire_reply_FieldNumber_ListItemArray = 10,
  protocol_watch_dial_plate_inquire_reply_FieldNumber_TotalSize = 11,
  protocol_watch_dial_plate_inquire_reply_FieldNumber_UserCloudSize = 12,
  protocol_watch_dial_plate_inquire_reply_FieldNumber_UserPhotoSize = 13,
  protocol_watch_dial_plate_inquire_reply_FieldNumber_NowShowPlateName = 14,
  protocol_watch_dial_plate_inquire_reply_FieldNumber_EnableCompress = 15,
  protocol_watch_dial_plate_inquire_reply_FieldNumber_FuncTable = 16,
  protocol_watch_dial_plate_inquire_reply_FieldNumber_PlatePhotoPicSupportNum = 17,
  protocol_watch_dial_plate_inquire_reply_FieldNumber_AllPlateSupportMax = 18,
};

GPB_FINAL @interface protocol_watch_dial_plate_inquire_reply : GPBMessage

/** 1bytes operation type */
@property(nonatomic, readwrite) enum dial_operate_type operate;

/** 1bytes calculation mode 0: Calculate by memory size 1: Calculate by number */
@property(nonatomic, readwrite) uint32_t formulaMode;

/** 1bytes frame version number */
@property(nonatomic, readwrite) uint32_t plateVersion;

/** 1bytes total number of cloud dials */
@property(nonatomic, readwrite) uint32_t cloudPlateNum;

/** 1bytes number of used cloud dials */
@property(nonatomic, readwrite) uint32_t userCloudPlateNum;

/** 1bytes photo plate */
@property(nonatomic, readwrite) uint32_t photoPlateNum;

/** 1bytes number of used photo plates */
@property(nonatomic, readwrite) uint32_t userPhotoPlateNum;

/** 1bytes total number of wallpaper dials */
@property(nonatomic, readwrite) uint32_t wallpaperPlateNum;

/** 1bytes number of used wallpaper dials */
@property(nonatomic, readwrite) uint32_t userWallpaperPlateNum;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<protocol_watch_dial_plate_list_item*> *listItemArray;
/** The number of items in @c listItemArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger listItemArray_Count;

/** 4bytes total size occupied by the dial */
@property(nonatomic, readwrite) uint32_t totalSize;

/** 4bytes space used by cloud dial, unit byte */
@property(nonatomic, readwrite) uint32_t userCloudSize;

/** 4bytes space used by album dial, unit byte */
@property(nonatomic, readwrite) uint32_t userPhotoSize;

/** max:30 //The name of the currently displayed dial */
@property(nonatomic, readwrite, copy, null_resettable) NSData *nowShowPlateName;

/** 1bytes compression type, 0 means no compression, 4 means use LZ4 compression method */
@property(nonatomic, readwrite) uint32_t enableCompress;

/** function table */
@property(nonatomic, readwrite) uint32_t funcTable;

/** 1bytes number of photos supported by the photo dial */
@property(nonatomic, readwrite) uint32_t platePhotoPicSupportNum;

/** 1bytes the maximum number supported by all dials */
@property(nonatomic, readwrite) uint32_t allPlateSupportMax;

@end

/**
 * Fetches the raw value of a @c protocol_watch_dial_plate_inquire_reply's @c operate property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t protocol_watch_dial_plate_inquire_reply_Operate_RawValue(protocol_watch_dial_plate_inquire_reply *message);
/**
 * Sets the raw value of an @c protocol_watch_dial_plate_inquire_reply's @c operate property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void Setprotocol_watch_dial_plate_inquire_reply_Operate_RawValue(protocol_watch_dial_plate_inquire_reply *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
