// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: card.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Card.pbobjc.h"
#import "Enums.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(quick_card_func);

#pragma mark - CardRoot

@implementation CardRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - CardRoot_FileDescriptor

static GPBFileDescriptor *CardRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - quick_card_func

@implementation quick_card_func

@dynamic isSupport;
@dynamic isDelete;

typedef struct quick_card_func__storage_ {
  uint32_t _has_storage_[1];
} quick_card_func__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isSupport",
        .dataTypeSpecific.clazz = Nil,
        .number = quick_card_func_FieldNumber_IsSupport,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isDelete",
        .dataTypeSpecific.clazz = Nil,
        .number = quick_card_func_FieldNumber_IsDelete,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[quick_card_func class]
                                     rootClass:[CardRoot class]
                                          file:CardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(quick_card_func__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - protocol_quick_card_operate

@implementation protocol_quick_card_operate

@dynamic operate;
@dynamic cardTypeArray, cardTypeArray_Count;

typedef struct protocol_quick_card_operate__storage_ {
  uint32_t _has_storage_[1];
  operate_type operate;
  GPBEnumArray *cardTypeArray;
} protocol_quick_card_operate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "operate",
        .dataTypeSpecific.enumDescFunc = operate_type_EnumDescriptor,
        .number = protocol_quick_card_operate_FieldNumber_Operate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(protocol_quick_card_operate__storage_, operate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cardTypeArray",
        .dataTypeSpecific.enumDescFunc = quick_card_type_EnumDescriptor,
        .number = protocol_quick_card_operate_FieldNumber_CardTypeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(protocol_quick_card_operate__storage_, cardTypeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[protocol_quick_card_operate class]
                                     rootClass:[CardRoot class]
                                          file:CardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(protocol_quick_card_operate__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t protocol_quick_card_operate_Operate_RawValue(protocol_quick_card_operate *message) {
  GPBDescriptor *descriptor = [protocol_quick_card_operate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_quick_card_operate_FieldNumber_Operate];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_quick_card_operate_Operate_RawValue(protocol_quick_card_operate *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_quick_card_operate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_quick_card_operate_FieldNumber_Operate];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - protocol_quick_card_inquire_reply

@implementation protocol_quick_card_inquire_reply

@dynamic operate;
@dynamic quickCardSupportMax;
@dynamic quickCardSupportMin;
@dynamic funcTable;
@dynamic cardTypeArray, cardTypeArray_Count;
@dynamic hasCardTypeExerciseSupport, cardTypeExerciseSupport;
@dynamic hasCardTypeWeatherSupport, cardTypeWeatherSupport;
@dynamic hasCardTypeSuggestSupport, cardTypeSuggestSupport;
@dynamic hasCardTypeDialSupport, cardTypeDialSupport;
@dynamic hasCardTypeActivitySupport, cardTypeActivitySupport;
@dynamic hasCardTypeHeartrateSupport, cardTypeHeartrateSupport;
@dynamic hasCardTypeSleepSupport, cardTypeSleepSupport;
@dynamic hasCardTypeStepsSupport, cardTypeStepsSupport;
@dynamic hasCardTypeSpo2Support, cardTypeSpo2Support;
@dynamic hasCardTypeMenstruationSupport, cardTypeMenstruationSupport;
@dynamic hasCardTypeMeasurementSupport, cardTypeMeasurementSupport;
@dynamic hasCardTypeRecentWorkoutSupport, cardTypeRecentWorkoutSupport;
@dynamic hasCardTypeHrvSupport, cardTypeHrvSupport;
@dynamic hasCardTypeUvSupport, cardTypeUvSupport;
@dynamic hasCardTypeAstronomySupport, cardTypeAstronomySupport;
@dynamic hasCardTypeWorldClockSupport, cardTypeWorldClockSupport;
@dynamic hasCardTypeAlexaSupport, cardTypeAlexaSupport;

typedef struct protocol_quick_card_inquire_reply__storage_ {
  uint32_t _has_storage_[1];
  operate_type operate;
  uint32_t quickCardSupportMax;
  uint32_t quickCardSupportMin;
  uint32_t funcTable;
  GPBEnumArray *cardTypeArray;
  quick_card_func *cardTypeExerciseSupport;
  quick_card_func *cardTypeWeatherSupport;
  quick_card_func *cardTypeSuggestSupport;
  quick_card_func *cardTypeDialSupport;
  quick_card_func *cardTypeActivitySupport;
  quick_card_func *cardTypeHeartrateSupport;
  quick_card_func *cardTypeSleepSupport;
  quick_card_func *cardTypeStepsSupport;
  quick_card_func *cardTypeSpo2Support;
  quick_card_func *cardTypeMenstruationSupport;
  quick_card_func *cardTypeMeasurementSupport;
  quick_card_func *cardTypeRecentWorkoutSupport;
  quick_card_func *cardTypeHrvSupport;
  quick_card_func *cardTypeUvSupport;
  quick_card_func *cardTypeAstronomySupport;
  quick_card_func *cardTypeWorldClockSupport;
  quick_card_func *cardTypeAlexaSupport;
} protocol_quick_card_inquire_reply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "operate",
        .dataTypeSpecific.enumDescFunc = operate_type_EnumDescriptor,
        .number = protocol_quick_card_inquire_reply_FieldNumber_Operate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, operate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "quickCardSupportMax",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_quick_card_inquire_reply_FieldNumber_QuickCardSupportMax,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, quickCardSupportMax),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "quickCardSupportMin",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_quick_card_inquire_reply_FieldNumber_QuickCardSupportMin,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, quickCardSupportMin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "funcTable",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_quick_card_inquire_reply_FieldNumber_FuncTable,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, funcTable),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cardTypeArray",
        .dataTypeSpecific.enumDescFunc = quick_card_type_EnumDescriptor,
        .number = protocol_quick_card_inquire_reply_FieldNumber_CardTypeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, cardTypeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cardTypeExerciseSupport",
        .dataTypeSpecific.clazz = GPBObjCClass(quick_card_func),
        .number = protocol_quick_card_inquire_reply_FieldNumber_CardTypeExerciseSupport,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, cardTypeExerciseSupport),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardTypeWeatherSupport",
        .dataTypeSpecific.clazz = GPBObjCClass(quick_card_func),
        .number = protocol_quick_card_inquire_reply_FieldNumber_CardTypeWeatherSupport,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, cardTypeWeatherSupport),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardTypeSuggestSupport",
        .dataTypeSpecific.clazz = GPBObjCClass(quick_card_func),
        .number = protocol_quick_card_inquire_reply_FieldNumber_CardTypeSuggestSupport,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, cardTypeSuggestSupport),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardTypeDialSupport",
        .dataTypeSpecific.clazz = GPBObjCClass(quick_card_func),
        .number = protocol_quick_card_inquire_reply_FieldNumber_CardTypeDialSupport,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, cardTypeDialSupport),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardTypeActivitySupport",
        .dataTypeSpecific.clazz = GPBObjCClass(quick_card_func),
        .number = protocol_quick_card_inquire_reply_FieldNumber_CardTypeActivitySupport,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, cardTypeActivitySupport),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardTypeHeartrateSupport",
        .dataTypeSpecific.clazz = GPBObjCClass(quick_card_func),
        .number = protocol_quick_card_inquire_reply_FieldNumber_CardTypeHeartrateSupport,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, cardTypeHeartrateSupport),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardTypeSleepSupport",
        .dataTypeSpecific.clazz = GPBObjCClass(quick_card_func),
        .number = protocol_quick_card_inquire_reply_FieldNumber_CardTypeSleepSupport,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, cardTypeSleepSupport),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardTypeStepsSupport",
        .dataTypeSpecific.clazz = GPBObjCClass(quick_card_func),
        .number = protocol_quick_card_inquire_reply_FieldNumber_CardTypeStepsSupport,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, cardTypeStepsSupport),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardTypeSpo2Support",
        .dataTypeSpecific.clazz = GPBObjCClass(quick_card_func),
        .number = protocol_quick_card_inquire_reply_FieldNumber_CardTypeSpo2Support,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, cardTypeSpo2Support),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardTypeMenstruationSupport",
        .dataTypeSpecific.clazz = GPBObjCClass(quick_card_func),
        .number = protocol_quick_card_inquire_reply_FieldNumber_CardTypeMenstruationSupport,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, cardTypeMenstruationSupport),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardTypeMeasurementSupport",
        .dataTypeSpecific.clazz = GPBObjCClass(quick_card_func),
        .number = protocol_quick_card_inquire_reply_FieldNumber_CardTypeMeasurementSupport,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, cardTypeMeasurementSupport),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardTypeRecentWorkoutSupport",
        .dataTypeSpecific.clazz = GPBObjCClass(quick_card_func),
        .number = protocol_quick_card_inquire_reply_FieldNumber_CardTypeRecentWorkoutSupport,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, cardTypeRecentWorkoutSupport),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardTypeHrvSupport",
        .dataTypeSpecific.clazz = GPBObjCClass(quick_card_func),
        .number = protocol_quick_card_inquire_reply_FieldNumber_CardTypeHrvSupport,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, cardTypeHrvSupport),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardTypeUvSupport",
        .dataTypeSpecific.clazz = GPBObjCClass(quick_card_func),
        .number = protocol_quick_card_inquire_reply_FieldNumber_CardTypeUvSupport,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, cardTypeUvSupport),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardTypeAstronomySupport",
        .dataTypeSpecific.clazz = GPBObjCClass(quick_card_func),
        .number = protocol_quick_card_inquire_reply_FieldNumber_CardTypeAstronomySupport,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, cardTypeAstronomySupport),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardTypeWorldClockSupport",
        .dataTypeSpecific.clazz = GPBObjCClass(quick_card_func),
        .number = protocol_quick_card_inquire_reply_FieldNumber_CardTypeWorldClockSupport,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, cardTypeWorldClockSupport),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cardTypeAlexaSupport",
        .dataTypeSpecific.clazz = GPBObjCClass(quick_card_func),
        .number = protocol_quick_card_inquire_reply_FieldNumber_CardTypeAlexaSupport,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(protocol_quick_card_inquire_reply__storage_, cardTypeAlexaSupport),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[protocol_quick_card_inquire_reply class]
                                     rootClass:[CardRoot class]
                                          file:CardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(protocol_quick_card_inquire_reply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t protocol_quick_card_inquire_reply_Operate_RawValue(protocol_quick_card_inquire_reply *message) {
  GPBDescriptor *descriptor = [protocol_quick_card_inquire_reply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_quick_card_inquire_reply_FieldNumber_Operate];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_quick_card_inquire_reply_Operate_RawValue(protocol_quick_card_inquire_reply *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_quick_card_inquire_reply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_quick_card_inquire_reply_FieldNumber_Operate];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
