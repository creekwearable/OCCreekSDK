// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: focus.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Focus.pbobjc.h"
#import "Enums.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(protocol_focus_sleep_mode);

#pragma mark - FocusRoot

@implementation FocusRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - FocusRoot_FileDescriptor

static GPBFileDescriptor *FocusRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - protocol_focus_sleep_mode

@implementation protocol_focus_sleep_mode

@dynamic switchFlag;
@dynamic startHour;
@dynamic startMinute;
@dynamic endHour;
@dynamic endMinute;

typedef struct protocol_focus_sleep_mode__storage_ {
  uint32_t _has_storage_[1];
  uint32_t startHour;
  uint32_t startMinute;
  uint32_t endHour;
  uint32_t endMinute;
} protocol_focus_sleep_mode__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "switchFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_focus_sleep_mode_FieldNumber_SwitchFlag,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "startHour",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_focus_sleep_mode_FieldNumber_StartHour,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(protocol_focus_sleep_mode__storage_, startHour),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "startMinute",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_focus_sleep_mode_FieldNumber_StartMinute,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(protocol_focus_sleep_mode__storage_, startMinute),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "endHour",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_focus_sleep_mode_FieldNumber_EndHour,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(protocol_focus_sleep_mode__storage_, endHour),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "endMinute",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_focus_sleep_mode_FieldNumber_EndMinute,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(protocol_focus_sleep_mode__storage_, endMinute),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[protocol_focus_sleep_mode class]
                                     rootClass:[FocusRoot class]
                                          file:FocusRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(protocol_focus_sleep_mode__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - protocol_focus_mode_operate

@implementation protocol_focus_mode_operate

@dynamic operate;
@dynamic hasSleepMode, sleepMode;

typedef struct protocol_focus_mode_operate__storage_ {
  uint32_t _has_storage_[1];
  operate_type operate;
  protocol_focus_sleep_mode *sleepMode;
} protocol_focus_mode_operate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "operate",
        .dataTypeSpecific.enumDescFunc = operate_type_EnumDescriptor,
        .number = protocol_focus_mode_operate_FieldNumber_Operate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(protocol_focus_mode_operate__storage_, operate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sleepMode",
        .dataTypeSpecific.clazz = GPBObjCClass(protocol_focus_sleep_mode),
        .number = protocol_focus_mode_operate_FieldNumber_SleepMode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(protocol_focus_mode_operate__storage_, sleepMode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[protocol_focus_mode_operate class]
                                     rootClass:[FocusRoot class]
                                          file:FocusRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(protocol_focus_mode_operate__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t protocol_focus_mode_operate_Operate_RawValue(protocol_focus_mode_operate *message) {
  GPBDescriptor *descriptor = [protocol_focus_mode_operate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_focus_mode_operate_FieldNumber_Operate];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_focus_mode_operate_Operate_RawValue(protocol_focus_mode_operate *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_focus_mode_operate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_focus_mode_operate_FieldNumber_Operate];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - protocol_focus_mode_inquire_reply

@implementation protocol_focus_mode_inquire_reply

@dynamic operate;
@dynamic funcTable;
@dynamic hasSleepMode, sleepMode;

typedef struct protocol_focus_mode_inquire_reply__storage_ {
  uint32_t _has_storage_[1];
  operate_type operate;
  uint32_t funcTable;
  protocol_focus_sleep_mode *sleepMode;
} protocol_focus_mode_inquire_reply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "operate",
        .dataTypeSpecific.enumDescFunc = operate_type_EnumDescriptor,
        .number = protocol_focus_mode_inquire_reply_FieldNumber_Operate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(protocol_focus_mode_inquire_reply__storage_, operate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "funcTable",
        .dataTypeSpecific.clazz = Nil,
        .number = protocol_focus_mode_inquire_reply_FieldNumber_FuncTable,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(protocol_focus_mode_inquire_reply__storage_, funcTable),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sleepMode",
        .dataTypeSpecific.clazz = GPBObjCClass(protocol_focus_sleep_mode),
        .number = protocol_focus_mode_inquire_reply_FieldNumber_SleepMode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(protocol_focus_mode_inquire_reply__storage_, sleepMode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[protocol_focus_mode_inquire_reply class]
                                     rootClass:[FocusRoot class]
                                          file:FocusRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(protocol_focus_mode_inquire_reply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t protocol_focus_mode_inquire_reply_Operate_RawValue(protocol_focus_mode_inquire_reply *message) {
  GPBDescriptor *descriptor = [protocol_focus_mode_inquire_reply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_focus_mode_inquire_reply_FieldNumber_Operate];
  return GPBGetMessageRawEnumField(message, field);
}

void Setprotocol_focus_mode_inquire_reply_Operate_RawValue(protocol_focus_mode_inquire_reply *message, int32_t value) {
  GPBDescriptor *descriptor = [protocol_focus_mode_inquire_reply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:protocol_focus_mode_inquire_reply_FieldNumber_Operate];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
